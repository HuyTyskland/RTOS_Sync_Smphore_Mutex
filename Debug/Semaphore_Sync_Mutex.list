
Semaphore_Sync_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000749c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800762c  0800762c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a4  080078a4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078ac  080078ac  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080078b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00012e78  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f04  20012f04  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001416d  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e8f  00000000  00000000  00034229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  000370b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  000382d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236fa  00000000  00000000  000393d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001493d  00000000  00000000  0005caca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5e9d  00000000  00000000  00071407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001472a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056d0  00000000  00000000  001472f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007614 	.word	0x08007614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08007614 	.word	0x08007614

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fd4f 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */
  BaseType_t status;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f887 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f919 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8ed 	bl	8000774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 800059a:	4b34      	ldr	r3, [pc, #208]	; (800066c <main+0xe8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a33      	ldr	r2, [pc, #204]	; (800066c <main+0xe8>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]

  // create binary semaphore
  printmsg(msg_demo_bin);
 80005a6:	4b32      	ldr	r3, [pc, #200]	; (8000670 <main+0xec>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fa6a 	bl	8000a84 <printmsg>

  vSemaphoreCreateBinary(bin_smp_handle);
 80005b0:	2203      	movs	r2, #3
 80005b2:	2100      	movs	r1, #0
 80005b4:	2001      	movs	r0, #1
 80005b6:	f003 f94d 	bl	8003854 <xQueueGenericCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a2d      	ldr	r2, [pc, #180]	; (8000674 <main+0xf0>)
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <main+0xf0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d006      	beq.n	80005d6 <main+0x52>
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <main+0xf0>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 f9c1 	bl	8003958 <xQueueGenericSend>

  queue_handle = xQueueCreate(1, sizeof( unsigned int));
 80005d6:	2200      	movs	r2, #0
 80005d8:	2104      	movs	r1, #4
 80005da:	2001      	movs	r0, #1
 80005dc:	f003 f93a 	bl	8003854 <xQueueGenericCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a25      	ldr	r2, [pc, #148]	; (8000678 <main+0xf4>)
 80005e4:	6013      	str	r3, [r2, #0]

  if((bin_smp_handle != NULL) && (queue_handle != NULL))
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <main+0xf0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d037      	beq.n	800065e <main+0xda>
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <main+0xf4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d033      	beq.n	800065e <main+0xda>
  {
  	status  = xTaskCreate(manager_task_handler, "Manager", 200, "This is manager task", 3, &manager_task_handle);
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <main+0xf8>)
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2303      	movs	r3, #3
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <main+0xfc>)
 8000600:	22c8      	movs	r2, #200	; 0xc8
 8000602:	4920      	ldr	r1, [pc, #128]	; (8000684 <main+0x100>)
 8000604:	4820      	ldr	r0, [pc, #128]	; (8000688 <main+0x104>)
 8000606:	f003 fec1 	bl	800438c <xTaskCreate>
 800060a:	60f8      	str	r0, [r7, #12]
		configASSERT(status == pdPASS);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00a      	beq.n	8000628 <main+0xa4>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000624:	bf00      	nop
 8000626:	e7fe      	b.n	8000626 <main+0xa2>

		status = xTaskCreate(employee_task_handler, "Employee", 200, "This is employee task", 1, &employee_task_handle);
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <main+0x108>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <main+0x10c>)
 8000632:	22c8      	movs	r2, #200	; 0xc8
 8000634:	4917      	ldr	r1, [pc, #92]	; (8000694 <main+0x110>)
 8000636:	4818      	ldr	r0, [pc, #96]	; (8000698 <main+0x114>)
 8000638:	f003 fea8 	bl	800438c <xTaskCreate>
 800063c:	60f8      	str	r0, [r7, #12]
		configASSERT(status == pdPASS);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d00a      	beq.n	800065a <main+0xd6>
        __asm volatile
 8000644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000648:	f383 8811 	msr	BASEPRI, r3
 800064c:	f3bf 8f6f 	isb	sy
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	607b      	str	r3, [r7, #4]
    }
 8000656:	bf00      	nop
 8000658:	e7fe      	b.n	8000658 <main+0xd4>

	  vTaskStartScheduler();
 800065a:	f004 f811 	bl	8004680 <vTaskStartScheduler>
  }

  printmsg(fail_msg);
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <main+0x118>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fa0e 	bl	8000a84 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0xe4>
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000000 	.word	0x20000000
 8000674:	200000f4 	.word	0x200000f4
 8000678:	200000f8 	.word	0x200000f8
 800067c:	200000ec 	.word	0x200000ec
 8000680:	080076cc 	.word	0x080076cc
 8000684:	080076e4 	.word	0x080076e4
 8000688:	08000ab1 	.word	0x08000ab1
 800068c:	200000f0 	.word	0x200000f0
 8000690:	080076ec 	.word	0x080076ec
 8000694:	08007704 	.word	0x08007704
 8000698:	08000b45 	.word	0x08000b45
 800069c:	20000004 	.word	0x20000004

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 fda2 	bl	80061f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000714:	2332      	movs	r3, #50	; 0x32
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000718:	2304      	movs	r3, #4
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 ffed 	bl	8001704 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fa56 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fa4e 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 fa3f 	bl	8000be0 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 ff22 	bl	80025f4 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 fa13 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000a8 	.word	0x200000a8
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4ba2      	ldr	r3, [pc, #648]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4aa1      	ldr	r2, [pc, #644]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b9f      	ldr	r3, [pc, #636]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b9b      	ldr	r3, [pc, #620]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a9a      	ldr	r2, [pc, #616]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b98      	ldr	r3, [pc, #608]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b94      	ldr	r3, [pc, #592]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a93      	ldr	r2, [pc, #588]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b91      	ldr	r3, [pc, #580]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b8d      	ldr	r3, [pc, #564]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a8c      	ldr	r2, [pc, #560]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b8a      	ldr	r3, [pc, #552]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b86      	ldr	r3, [pc, #536]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a85      	ldr	r2, [pc, #532]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b83      	ldr	r3, [pc, #524]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b7f      	ldr	r3, [pc, #508]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a7e      	ldr	r2, [pc, #504]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b7c      	ldr	r3, [pc, #496]	; (8000a6c <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2108      	movs	r1, #8
 800088a:	4879      	ldr	r0, [pc, #484]	; (8000a70 <MX_GPIO_Init+0x2a8>)
 800088c:	f000 ff20 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	4877      	ldr	r0, [pc, #476]	; (8000a74 <MX_GPIO_Init+0x2ac>)
 8000896:	f000 ff1b 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089a:	2200      	movs	r2, #0
 800089c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a0:	4875      	ldr	r0, [pc, #468]	; (8000a78 <MX_GPIO_Init+0x2b0>)
 80008a2:	f000 ff15 	bl	80016d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	486c      	ldr	r0, [pc, #432]	; (8000a70 <MX_GPIO_Init+0x2a8>)
 80008be:	f000 fd6b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4866      	ldr	r0, [pc, #408]	; (8000a74 <MX_GPIO_Init+0x2ac>)
 80008da:	f000 fd5d 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	485e      	ldr	r0, [pc, #376]	; (8000a74 <MX_GPIO_Init+0x2ac>)
 80008fa:	f000 fd4d 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	485a      	ldr	r0, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x2b4>)
 8000914:	f000 fd40 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000918:	2310      	movs	r3, #16
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000928:	2306      	movs	r3, #6
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4852      	ldr	r0, [pc, #328]	; (8000a7c <MX_GPIO_Init+0x2b4>)
 8000934:	f000 fd30 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000938:	23e0      	movs	r3, #224	; 0xe0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000948:	2305      	movs	r3, #5
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	484a      	ldr	r0, [pc, #296]	; (8000a7c <MX_GPIO_Init+0x2b4>)
 8000954:	f000 fd20 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000958:	2304      	movs	r3, #4
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4845      	ldr	r0, [pc, #276]	; (8000a80 <MX_GPIO_Init+0x2b8>)
 800096c:	f000 fd14 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000982:	2305      	movs	r3, #5
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	483c      	ldr	r0, [pc, #240]	; (8000a80 <MX_GPIO_Init+0x2b8>)
 800098e:	f000 fd03 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000992:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000996:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4833      	ldr	r0, [pc, #204]	; (8000a78 <MX_GPIO_Init+0x2b0>)
 80009ac:	f000 fcf4 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009b0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c2:	2306      	movs	r3, #6
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4829      	ldr	r0, [pc, #164]	; (8000a74 <MX_GPIO_Init+0x2ac>)
 80009ce:	f000 fce3 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4825      	ldr	r0, [pc, #148]	; (8000a7c <MX_GPIO_Init+0x2b4>)
 80009e8:	f000 fcd6 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	481c      	ldr	r0, [pc, #112]	; (8000a7c <MX_GPIO_Init+0x2b4>)
 8000a0a:	f000 fcc5 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4815      	ldr	r0, [pc, #84]	; (8000a78 <MX_GPIO_Init+0x2b0>)
 8000a22:	f000 fcb9 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2c:	2312      	movs	r3, #18
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <MX_GPIO_Init+0x2b8>)
 8000a44:	f000 fca8 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a4c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_GPIO_Init+0x2a8>)
 8000a5e:	f000 fc9b 	bl	8001398 <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	; 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400

08000a84 <printmsg>:

/* USER CODE BEGIN 4 */
static void printmsg(const char* msg)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fb9f 	bl	80001d0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <printmsg+0x28>)
 8000a9e:	f001 fdf6 	bl	800268e <HAL_UART_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000a8 	.word	0x200000a8

08000ab0 <manager_task_handler>:

static void manager_task_handler(void* parameters)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	unsigned int xWorkTicketId;
	portBASE_TYPE xStatus;
	char buffer[15];

	xSemaphoreGive(bin_smp_handle);
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <manager_task_handler+0x80>)
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	2300      	movs	r3, #0
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f002 ff49 	bl	8003958 <xQueueGenericSend>

	while(1)
	{
		xWorkTicketId = (rand() & 0x1FF);
 8000ac6:	f005 fb9f 	bl	8006208 <rand>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ad0:	61bb      	str	r3, [r7, #24]
		xStatus = xQueueSend(queue_handle, &xWorkTicketId, portMAX_DELAY);
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <manager_task_handler+0x84>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	f107 0118 	add.w	r1, r7, #24
 8000ada:	2300      	movs	r3, #0
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	f002 ff3a 	bl	8003958 <xQueueGenericSend>
 8000ae4:	61f8      	str	r0, [r7, #28]

		if(xStatus != pdPASS)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d005      	beq.n	8000af8 <manager_task_handler+0x48>
		{
			printmsg(fail_mngr_msg);
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <manager_task_handler+0x88>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffc7 	bl	8000a84 <printmsg>
 8000af6:	e7e6      	b.n	8000ac6 <manager_task_handler+0x16>
		}
		else
		{
			xSemaphoreGive(bin_smp_handle);
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <manager_task_handler+0x80>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	f002 ff29 	bl	8003958 <xQueueGenericSend>
			sprintf(buffer, "Manager: work ID: %u\n", xWorkTicketId);
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	490b      	ldr	r1, [pc, #44]	; (8000b3c <manager_task_handler+0x8c>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 fbb8 	bl	8006284 <siprintf>
			printmsg(buffer);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffb3 	bl	8000a84 <printmsg>
			taskYIELD();
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <manager_task_handler+0x90>)
 8000b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	f3bf 8f4f 	dsb	sy
 8000b2a:	f3bf 8f6f 	isb	sy
		xWorkTicketId = (rand() & 0x1FF);
 8000b2e:	e7ca      	b.n	8000ac6 <manager_task_handler+0x16>
 8000b30:	200000f4 	.word	0x200000f4
 8000b34:	200000f8 	.word	0x200000f8
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	08007710 	.word	0x08007710
 8000b40:	e000ed04 	.word	0xe000ed04

08000b44 <employee_task_handler>:
		}
	}
}

static void employee_task_handler(void* parameters)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	char buffer[10];
	portBASE_TYPE status;

	while(1)
	{
		xSemaphoreTake(bin_smp_handle, 0);
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <employee_task_handler+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 f988 	bl	8003e68 <xQueueSemaphoreTake>

		status = xQueueReceive(queue_handle, &xWorkTicketId, 0);
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <employee_task_handler+0x68>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f107 0113 	add.w	r1, r7, #19
 8000b60:	2200      	movs	r2, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 f8a0 	bl	8003ca8 <xQueueReceive>
 8000b68:	6178      	str	r0, [r7, #20]

		if(status == pdPASS)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d115      	bne.n	8000b9c <employee_task_handler+0x58>
		{
			sprintf(buffer, "%u\n", xWorkTicketId);
 8000b70:	7cfb      	ldrb	r3, [r7, #19]
 8000b72:	461a      	mov	r2, r3
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <employee_task_handler+0x6c>)
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 fb82 	bl	8006284 <siprintf>
			printmsg(employee_msg);
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <employee_task_handler+0x70>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff7d 	bl	8000a84 <printmsg>
			printmsg(buffer);
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff78 	bl	8000a84 <printmsg>
			vTaskDelay(pdMS_TO_TICKS(200));
 8000b94:	20c8      	movs	r0, #200	; 0xc8
 8000b96:	f003 fd3f 	bl	8004618 <vTaskDelay>
 8000b9a:	e7d7      	b.n	8000b4c <employee_task_handler+0x8>
		}
		else
		{
			printmsg(fail_employee_msg);
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <employee_task_handler+0x74>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff6f 	bl	8000a84 <printmsg>
		xSemaphoreTake(bin_smp_handle, 0);
 8000ba6:	e7d1      	b.n	8000b4c <employee_task_handler+0x8>
 8000ba8:	200000f4 	.word	0x200000f4
 8000bac:	200000f8 	.word	0x200000f8
 8000bb0:	08007728 	.word	0x08007728
 8000bb4:	2000000c 	.word	0x2000000c
 8000bb8:	20000010 	.word	0x20000010

08000bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bce:	f000 fa4f 	bl	8001070 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40001000 	.word	0x40001000

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d133      	bne.n	8000cc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c96:	230c      	movs	r3, #12
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HAL_UART_MspInit+0x9c>)
 8000cb2:	f000 fb71 	bl	8001398 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2106      	movs	r1, #6
 8000cba:	2026      	movs	r0, #38	; 0x26
 8000cbc:	f000 fab0 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc0:	2026      	movs	r0, #38	; 0x26
 8000cc2:	f000 fac9 	bl	8001258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <HAL_InitTick+0xe4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_InitTick+0xe4>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_InitTick+0xe4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d08:	f107 0210 	add.w	r2, r7, #16
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f98e 	bl	8002034 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d103      	bne.n	8000d2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d22:	f001 f95f 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8000d26:	6378      	str	r0, [r7, #52]	; 0x34
 8000d28:	e004      	b.n	8000d34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d2a:	f001 f95b 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_InitTick+0xe8>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	0c9b      	lsrs	r3, r3, #18
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_InitTick+0xf0>)
 8000d46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d6a:	f001 f995 	bl	8002098 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d11b      	bne.n	8000db4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d7c:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <HAL_InitTick+0xec>)
 8000d7e:	f001 f9e5 	bl	800214c <HAL_TIM_Base_Start_IT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d111      	bne.n	8000db4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d90:	2036      	movs	r0, #54	; 0x36
 8000d92:	f000 fa61 	bl	8001258 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d808      	bhi.n	8000dae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 fa3d 	bl	8001220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_InitTick+0xf4>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e002      	b.n	8000db4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3738      	adds	r7, #56	; 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	431bde83 	.word	0x431bde83
 8000dc8:	200000fc 	.word	0x200000fc
 8000dcc:	40001000 	.word	0x40001000
 8000dd0:	20000018 	.word	0x20000018

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <USART2_IRQHandler+0x10>)
 8000e06:	f001 fcd5 	bl	80027b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000a8 	.word	0x200000a8

08000e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM6_DAC_IRQHandler+0x10>)
 8000e1a:	f001 fa07 	bl	800222c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000fc 	.word	0x200000fc

08000e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	return 1;
 8000e2c:	2301      	movs	r3, #1
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_kill>:

int _kill(int pid, int sig)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e42:	f005 f9a1 	bl	8006188 <__errno>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2216      	movs	r2, #22
 8000e4a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_exit>:

void _exit (int status)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ffe7 	bl	8000e38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e6a:	e7fe      	b.n	8000e6a <_exit+0x12>

08000e6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
	}

return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e009      	b.n	8000ecc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf1      	blt.n	8000eb8 <_write+0x12>
	}
	return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f005 f906 	bl	8006188 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	20000144 	.word	0x20000144
 8000fb0:	20012f08 	.word	0x20012f08

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001002:	f7ff ffd7 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f005 f8c5 	bl	8006194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fabb 	bl	8000584 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800101c:	080078b4 	.word	0x080078b4
  ldr r2, =_sbss
 8001020:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001024:	20012f04 	.word	0x20012f04

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f8d8 	bl	800120a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fe3e 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fdc4 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000001c 	.word	0x2000001c
 8001094:	20000148 	.word	0x20000148

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000148 	.word	0x20000148

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff4c 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001232:	f7ff ff61 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ffb1 	bl	80011a4 <NVIC_EncodePriority>
 8001242:	4602      	mov	r2, r0
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff80 	bl	8001150 <__NVIC_SetPriority>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff54 	bl	8001114 <__NVIC_EnableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001282:	f7ff ff09 	bl	8001098 <HAL_GetTick>
 8001286:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e052      	b.n	800134c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0216 	bic.w	r2, r2, #22
 80012b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <HAL_DMA_Abort+0x62>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0208 	bic.w	r2, r2, #8
 80012e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f6:	e013      	b.n	8001320 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f8:	f7ff fece 	bl	8001098 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d90c      	bls.n	8001320 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2220      	movs	r2, #32
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2203      	movs	r2, #3
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e015      	b.n	800134c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1e4      	bne.n	80012f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	223f      	movs	r2, #63	; 0x3f
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d004      	beq.n	8001372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00c      	b.n	800138c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x328>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x310>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x334>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x334>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e267      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b82      	ldr	r3, [pc, #520]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e242      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6f      	ldr	r2, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6c      	ldr	r2, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b69      	ldr	r3, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc6c 	bl	8001098 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fc68 	bl	8001098 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e207      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fc58 	bl	8001098 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fc54 	bl	8001098 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f3      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c7      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4937      	ldr	r1, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fc0d 	bl	8001098 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fc09 	bl	8001098 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a8      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4925      	ldr	r1, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fbec 	bl	8001098 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fbe8 	bl	8001098 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e187      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d036      	beq.n	800195c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x248>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fbcc 	bl	8001098 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fbc8 	bl	8001098 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e167      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x248>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fbb5 	bl	8001098 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00e      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fbb1 	bl	8001098 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d907      	bls.n	8001950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e150      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ea      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8097 	beq.w	8001a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb71 	bl	8001098 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fb6d 	bl	8001098 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e10c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ea>
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	4a5e      	ldr	r2, [pc, #376]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fb32 	bl	8001098 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb2e 	bl	8001098 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0cb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ee      	beq.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fb1c 	bl	8001098 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fb18 	bl	8001098 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b5      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a1 	beq.w	8001be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d05c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d141      	bne.n	8001b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff faec 	bl	8001098 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fae8 	bl	8001098 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e087      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	491b      	ldr	r1, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fac1 	bl	8001098 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fabd 	bl	8001098 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e05c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x416>
 8001b38:	e054      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff faaa 	bl	8001098 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff faa6 	bl	8001098 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e045      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e038      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d028      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d121      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f9d8 	bl	8001098 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff f9d4 	bl	8001098 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff9e 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08007744 	.word	0x08007744
 8001db8:	20000014 	.word	0x20000014
 8001dbc:	20000018 	.word	0x20000018

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b094      	sub	sp, #80	; 0x50
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
 8001dcc:	2300      	movs	r3, #0
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80e1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e0db      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001df8:	e0db      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dfe:	e0d8      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	6139      	str	r1, [r7, #16]
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e64:	4659      	mov	r1, fp
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4651      	mov	r1, sl
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4651      	mov	r1, sl
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4651      	mov	r1, sl
 8001e74:	ebb2 0801 	subs.w	r8, r2, r1
 8001e78:	4659      	mov	r1, fp
 8001e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	eb18 0303 	adds.w	r3, r8, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	462b      	mov	r3, r5
 8001ea0:	eb49 0303 	adc.w	r3, r9, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	024b      	lsls	r3, r1, #9
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	024a      	lsls	r2, r1, #9
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed0:	f7fe f9d6 	bl	8000280 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	e058      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4611      	mov	r1, r2
 8001eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef8:	4642      	mov	r2, r8
 8001efa:	464b      	mov	r3, r9
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0159      	lsls	r1, r3, #5
 8001f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0a:	0150      	lsls	r0, r2, #5
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4641      	mov	r1, r8
 8001f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f16:	4649      	mov	r1, r9
 8001f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f30:	ebb2 040a 	subs.w	r4, r2, sl
 8001f34:	eb63 050b 	sbc.w	r5, r3, fp
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	00eb      	lsls	r3, r5, #3
 8001f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f46:	00e2      	lsls	r2, r4, #3
 8001f48:	4614      	mov	r4, r2
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	18e3      	adds	r3, r4, r3
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	464b      	mov	r3, r9
 8001f54:	eb45 0303 	adc.w	r3, r5, r3
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f66:	4629      	mov	r1, r5
 8001f68:	028b      	lsls	r3, r1, #10
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f70:	4621      	mov	r1, r4
 8001f72:	028a      	lsls	r2, r1, #10
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	61fa      	str	r2, [r7, #28]
 8001f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f84:	f7fe f97c 	bl	8000280 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3750      	adds	r7, #80	; 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000014 	.word	0x20000014

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	08007754 	.word	0x08007754

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002010:	f7ff ffdc 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0b5b      	lsrs	r3, r3, #13
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08007754 	.word	0x08007754

08002034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	220f      	movs	r2, #15
 8002042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_GetClockConfig+0x5c>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_RCC_GetClockConfig+0x60>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0207 	and.w	r2, r3, #7
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e041      	b.n	800212e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f839 	bl	8002136 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f000 f9d8 	bl	800248c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d001      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e04e      	b.n	8002202 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a23      	ldr	r2, [pc, #140]	; (8002210 <HAL_TIM_Base_Start_IT+0xc4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d022      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d01d      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_TIM_Base_Start_IT+0xc8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <HAL_TIM_Base_Start_IT+0xcc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_TIM_Base_Start_IT+0xd0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_TIM_Base_Start_IT+0xd4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_Base_Start_IT+0xd8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_TIM_Base_Start_IT+0xdc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d010      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ee:	e007      	b.n	8002200 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40010400 	.word	0x40010400
 8002224:	40014000 	.word	0x40014000
 8002228:	40001800 	.word	0x40001800

0800222c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d122      	bne.n	8002288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b02      	cmp	r3, #2
 800224e:	d11b      	bne.n	8002288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0202 	mvn.w	r2, #2
 8002258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8ee 	bl	8002450 <HAL_TIM_IC_CaptureCallback>
 8002274:	e005      	b.n	8002282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f8e0 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f8f1 	bl	8002464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b04      	cmp	r3, #4
 8002294:	d122      	bne.n	80022dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d11b      	bne.n	80022dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0204 	mvn.w	r2, #4
 80022ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2202      	movs	r2, #2
 80022b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8c4 	bl	8002450 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8b6 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f8c7 	bl	8002464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d122      	bne.n	8002330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d11b      	bne.n	8002330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0208 	mvn.w	r2, #8
 8002300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f89a 	bl	8002450 <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f88c 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f89d 	bl	8002464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b10      	cmp	r3, #16
 800233c:	d122      	bne.n	8002384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	2b10      	cmp	r3, #16
 800234a:	d11b      	bne.n	8002384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0210 	mvn.w	r2, #16
 8002354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2208      	movs	r2, #8
 800235a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f870 	bl	8002450 <HAL_TIM_IC_CaptureCallback>
 8002370:	e005      	b.n	800237e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f862 	bl	800243c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f873 	bl	8002464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10e      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0201 	mvn.w	r2, #1
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fc06 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b80      	cmp	r3, #128	; 0x80
 80023bc:	d10e      	bne.n	80023dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b80      	cmp	r3, #128	; 0x80
 80023ca:	d107      	bne.n	80023dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f902 	bl	80025e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f838 	bl	8002478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b20      	cmp	r3, #32
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b20      	cmp	r3, #32
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0220 	mvn.w	r2, #32
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8cc 	bl	80025cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <TIM_Base_SetConfig+0x114>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <TIM_Base_SetConfig+0x40>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024aa:	d00f      	beq.n	80024cc <TIM_Base_SetConfig+0x40>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3d      	ldr	r2, [pc, #244]	; (80025a4 <TIM_Base_SetConfig+0x118>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00b      	beq.n	80024cc <TIM_Base_SetConfig+0x40>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3c      	ldr	r2, [pc, #240]	; (80025a8 <TIM_Base_SetConfig+0x11c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d007      	beq.n	80024cc <TIM_Base_SetConfig+0x40>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3b      	ldr	r2, [pc, #236]	; (80025ac <TIM_Base_SetConfig+0x120>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d003      	beq.n	80024cc <TIM_Base_SetConfig+0x40>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3a      	ldr	r2, [pc, #232]	; (80025b0 <TIM_Base_SetConfig+0x124>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d108      	bne.n	80024de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <TIM_Base_SetConfig+0x114>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02b      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d027      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <TIM_Base_SetConfig+0x118>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d023      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <TIM_Base_SetConfig+0x11c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01f      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <TIM_Base_SetConfig+0x120>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01b      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <TIM_Base_SetConfig+0x124>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d017      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <TIM_Base_SetConfig+0x128>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <TIM_Base_SetConfig+0x12c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00f      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <TIM_Base_SetConfig+0x130>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00b      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <TIM_Base_SetConfig+0x134>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <TIM_Base_SetConfig+0x138>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d003      	beq.n	800253e <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <TIM_Base_SetConfig+0x13c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d108      	bne.n	8002550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <TIM_Base_SetConfig+0x114>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_Base_SetConfig+0xf8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <TIM_Base_SetConfig+0x124>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d103      	bne.n	800258c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	615a      	str	r2, [r3, #20]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40000c00 	.word	0x40000c00
 80025b0:	40010400 	.word	0x40010400
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40014400 	.word	0x40014400
 80025bc:	40014800 	.word	0x40014800
 80025c0:	40001800 	.word	0x40001800
 80025c4:	40001c00 	.word	0x40001c00
 80025c8:	40002000 	.word	0x40002000

080025cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e03f      	b.n	8002686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fb0e 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fd7b 	bl	8003134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b08a      	sub	sp, #40	; 0x28
 8002692:	af02      	add	r7, sp, #8
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d17c      	bne.n	80027a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_UART_Transmit+0x2c>
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e075      	b.n	80027aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Transmit+0x3e>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e06e      	b.n	80027aa <HAL_UART_Transmit+0x11c>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2221      	movs	r2, #33	; 0x21
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e2:	f7fe fcd9 	bl	8001098 <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fc:	d108      	bne.n	8002710 <HAL_UART_Transmit+0x82>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e003      	b.n	8002718 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002720:	e02a      	b.n	8002778 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 faf9 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e036      	b.n	80027aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3302      	adds	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e007      	b.n	800276a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1cf      	bne.n	8002722 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2200      	movs	r2, #0
 800278a:	2140      	movs	r1, #64	; 0x40
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fac9 	bl	8002d24 <UART_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e006      	b.n	80027aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b0ba      	sub	sp, #232	; 0xe8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_UART_IRQHandler+0x66>
 8002806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fbd3 	bl	8002fbe <UART_Receive_IT>
      return;
 8002818:	e256      	b.n	8002cc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800281a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80de 	beq.w	80029e0 <HAL_UART_IRQHandler+0x22c>
 8002824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002834:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80d1 	beq.w	80029e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800283e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_UART_IRQHandler+0xae>
 800284a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_UART_IRQHandler+0xd2>
 800286e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_UART_IRQHandler+0xf6>
 8002892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0204 	orr.w	r2, r3, #4
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d011      	beq.n	80028da <HAL_UART_IRQHandler+0x126>
 80028b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0208 	orr.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 81ed 	beq.w	8002cbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_UART_IRQHandler+0x14e>
 80028f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fb5e 	bl	8002fbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <HAL_UART_IRQHandler+0x17a>
 8002926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d04f      	beq.n	80029ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa66 	bl	8002e00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d141      	bne.n	80029c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3314      	adds	r3, #20
 8002948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800295c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3314      	adds	r3, #20
 800296a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800296e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800297a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1d9      	bne.n	8002942 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	2b00      	cmp	r3, #0
 8002994:	d013      	beq.n	80029be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	4a7d      	ldr	r2, [pc, #500]	; (8002b90 <HAL_UART_IRQHandler+0x3dc>)
 800299c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fcd6 	bl	8001354 <HAL_DMA_Abort_IT>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b8:	4610      	mov	r0, r2
 80029ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	e00e      	b.n	80029dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f99a 	bl	8002cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c4:	e00a      	b.n	80029dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f996 	bl	8002cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	e006      	b.n	80029dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f992 	bl	8002cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029da:	e170      	b.n	8002cbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	bf00      	nop
    return;
 80029de:	e16e      	b.n	8002cbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	f040 814a 	bne.w	8002c7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8143 	beq.w	8002c7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 813c 	beq.w	8002c7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	f040 80b4 	bne.w	8002b94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8140 	beq.w	8002cc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	f080 8139 	bcs.w	8002cc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a62:	f000 8088 	beq.w	8002b76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1d9      	bne.n	8002a66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ad6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ada:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e1      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3314      	adds	r3, #20
 8002af4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3314      	adds	r3, #20
 8002b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e3      	bne.n	8002aee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b46:	f023 0310 	bic.w	r3, r3, #16
 8002b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b58:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b60:	e841 2300 	strex	r3, r2, [r1]
 8002b64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1e3      	bne.n	8002b34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fb7f 	bl	8001274 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4619      	mov	r1, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8c0 	bl	8002d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b8c:	e099      	b.n	8002cc2 <HAL_UART_IRQHandler+0x50e>
 8002b8e:	bf00      	nop
 8002b90:	08002ec7 	.word	0x08002ec7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 808b 	beq.w	8002cc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8086 	beq.w	8002cc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bde:	647a      	str	r2, [r7, #68]	; 0x44
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e3      	bne.n	8002bba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	623b      	str	r3, [r7, #32]
   return(result);
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c16:	633a      	str	r2, [r7, #48]	; 0x30
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e3      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	e853 3f00 	ldrex	r3, [r3]
 8002c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0310 	bic.w	r3, r3, #16
 8002c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c5c:	61fa      	str	r2, [r7, #28]
 8002c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	69b9      	ldr	r1, [r7, #24]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	617b      	str	r3, [r7, #20]
   return(result);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e3      	bne.n	8002c38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c74:	4619      	mov	r1, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f848 	bl	8002d0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c7c:	e023      	b.n	8002cc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_UART_IRQHandler+0x4ea>
 8002c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f929 	bl	8002eee <UART_Transmit_IT>
    return;
 8002c9c:	e014      	b.n	8002cc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x514>
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f969 	bl	8002f8e <UART_EndTransmit_IT>
    return;
 8002cbc:	e004      	b.n	8002cc8 <HAL_UART_IRQHandler+0x514>
    return;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002cc6:	bf00      	nop
  }
}
 8002cc8:	37e8      	adds	r7, #232	; 0xe8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop

08002cd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b090      	sub	sp, #64	; 0x40
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d34:	e050      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d04c      	beq.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d44:	f7fe f9a8 	bl	8001098 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d241      	bcs.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d74:	637a      	str	r2, [r7, #52]	; 0x34
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e5      	bne.n	8002d54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	613b      	str	r3, [r7, #16]
   return(result);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3314      	adds	r3, #20
 8002da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da8:	623a      	str	r2, [r7, #32]
 8002daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	69f9      	ldr	r1, [r7, #28]
 8002dae:	6a3a      	ldr	r2, [r7, #32]
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e00f      	b.n	8002df8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d09f      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3740      	adds	r7, #64	; 0x40
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b095      	sub	sp, #84	; 0x54
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	e853 3f00 	ldrex	r3, [r3]
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e28:	643a      	str	r2, [r7, #64]	; 0x40
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e5      	bne.n	8002e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3314      	adds	r3, #20
 8002e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3314      	adds	r3, #20
 8002e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d119      	bne.n	8002eac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	e853 3f00 	ldrex	r3, [r3]
 8002e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f023 0310 	bic.w	r3, r3, #16
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e98:	61ba      	str	r2, [r7, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	6979      	ldr	r1, [r7, #20]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	e841 2300 	strex	r3, r2, [r1]
 8002ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e5      	bne.n	8002e78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002eba:	bf00      	nop
 8002ebc:	3754      	adds	r7, #84	; 0x54
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff ff09 	bl	8002cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b21      	cmp	r3, #33	; 0x21
 8002f00:	d13e      	bne.n	8002f80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d114      	bne.n	8002f36 <UART_Transmit_IT+0x48>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d110      	bne.n	8002f36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	1c9a      	adds	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	621a      	str	r2, [r3, #32]
 8002f34:	e008      	b.n	8002f48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	1c59      	adds	r1, r3, #1
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6211      	str	r1, [r2, #32]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4619      	mov	r1, r3
 8002f56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff fe8e 	bl	8002cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08c      	sub	sp, #48	; 0x30
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b22      	cmp	r3, #34	; 0x22
 8002fd0:	f040 80ab 	bne.w	800312a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fdc:	d117      	bne.n	800300e <UART_Receive_IT+0x50>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d113      	bne.n	800300e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	1c9a      	adds	r2, r3, #2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
 800300c:	e026      	b.n	800305c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003014:	2300      	movs	r3, #0
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d007      	beq.n	8003032 <UART_Receive_IT+0x74>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <UART_Receive_IT+0x82>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e008      	b.n	8003052 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304c:	b2da      	uxtb	r2, r3
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800306c:	2b00      	cmp	r3, #0
 800306e:	d15a      	bne.n	8003126 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0220 	bic.w	r2, r2, #32
 800307e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d135      	bne.n	800311c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	613b      	str	r3, [r7, #16]
   return(result);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f023 0310 	bic.w	r3, r3, #16
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	623a      	str	r2, [r7, #32]
 80030d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	69f9      	ldr	r1, [r7, #28]
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e5      	bne.n	80030b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d10a      	bne.n	800310e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fdf9 	bl	8002d0c <HAL_UARTEx_RxEventCallback>
 800311a:	e002      	b.n	8003122 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fde1 	bl	8002ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e002      	b.n	800312c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3730      	adds	r7, #48	; 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b0c0      	sub	sp, #256	; 0x100
 800313a:	af00      	add	r7, sp, #0
 800313c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	ea40 0301 	orr.w	r3, r0, r1
 800315c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800318c:	f021 010c 	bic.w	r1, r1, #12
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800319a:	430b      	orrs	r3, r1
 800319c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	6999      	ldr	r1, [r3, #24]
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	ea40 0301 	orr.w	r3, r0, r1
 80031ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b8f      	ldr	r3, [pc, #572]	; (8003400 <UART_SetConfig+0x2cc>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d005      	beq.n	80031d4 <UART_SetConfig+0xa0>
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <UART_SetConfig+0x2d0>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d104      	bne.n	80031de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7fe ff1a 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80031d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031dc:	e003      	b.n	80031e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031de:	f7fe ff01 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 80031e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	f040 810c 	bne.w	800340c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	1891      	adds	r1, r2, r2
 800320c:	65b9      	str	r1, [r7, #88]	; 0x58
 800320e:	415b      	adcs	r3, r3
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003216:	4621      	mov	r1, r4
 8003218:	eb12 0801 	adds.w	r8, r2, r1
 800321c:	4629      	mov	r1, r5
 800321e:	eb43 0901 	adc.w	r9, r3, r1
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4623      	mov	r3, r4
 800323c:	eb18 0303 	adds.w	r3, r8, r3
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003244:	462b      	mov	r3, r5
 8003246:	eb49 0303 	adc.w	r3, r9, r3
 800324a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800325a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800325e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003262:	460b      	mov	r3, r1
 8003264:	18db      	adds	r3, r3, r3
 8003266:	653b      	str	r3, [r7, #80]	; 0x50
 8003268:	4613      	mov	r3, r2
 800326a:	eb42 0303 	adc.w	r3, r2, r3
 800326e:	657b      	str	r3, [r7, #84]	; 0x54
 8003270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003278:	f7fd f802 	bl	8000280 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4b61      	ldr	r3, [pc, #388]	; (8003408 <UART_SetConfig+0x2d4>)
 8003282:	fba3 2302 	umull	r2, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	011c      	lsls	r4, r3, #4
 800328a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032a4:	415b      	adcs	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032ac:	4641      	mov	r1, r8
 80032ae:	eb12 0a01 	adds.w	sl, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb43 0b01 	adc.w	fp, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032cc:	4692      	mov	sl, r2
 80032ce:	469b      	mov	fp, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	eb1a 0303 	adds.w	r3, sl, r3
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032da:	464b      	mov	r3, r9
 80032dc:	eb4b 0303 	adc.w	r3, fp, r3
 80032e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032f8:	460b      	mov	r3, r1
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	643b      	str	r3, [r7, #64]	; 0x40
 80032fe:	4613      	mov	r3, r2
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
 8003306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800330a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800330e:	f7fc ffb7 	bl	8000280 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4611      	mov	r1, r2
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <UART_SetConfig+0x2d4>)
 800331a:	fba3 2301 	umull	r2, r3, r3, r1
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2264      	movs	r2, #100	; 0x64
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	1acb      	subs	r3, r1, r3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <UART_SetConfig+0x2d4>)
 8003330:	fba3 2302 	umull	r2, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800333c:	441c      	add	r4, r3
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800334c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	1891      	adds	r1, r2, r2
 8003356:	63b9      	str	r1, [r7, #56]	; 0x38
 8003358:	415b      	adcs	r3, r3
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003360:	4641      	mov	r1, r8
 8003362:	1851      	adds	r1, r2, r1
 8003364:	6339      	str	r1, [r7, #48]	; 0x30
 8003366:	4649      	mov	r1, r9
 8003368:	414b      	adcs	r3, r1
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003378:	4659      	mov	r1, fp
 800337a:	00cb      	lsls	r3, r1, #3
 800337c:	4651      	mov	r1, sl
 800337e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003382:	4651      	mov	r1, sl
 8003384:	00ca      	lsls	r2, r1, #3
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	4603      	mov	r3, r0
 800338c:	4642      	mov	r2, r8
 800338e:	189b      	adds	r3, r3, r2
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003394:	464b      	mov	r3, r9
 8003396:	460a      	mov	r2, r1
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033ca:	f7fc ff59 	bl	8000280 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <UART_SetConfig+0x2d4>)
 80033d4:	fba3 1302 	umull	r1, r3, r3, r2
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	2164      	movs	r1, #100	; 0x64
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	3332      	adds	r3, #50	; 0x32
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <UART_SetConfig+0x2d4>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	f003 0207 	and.w	r2, r3, #7
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4422      	add	r2, r4
 80033fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033fc:	e105      	b.n	800360a <UART_SetConfig+0x4d6>
 80033fe:	bf00      	nop
 8003400:	40011000 	.word	0x40011000
 8003404:	40011400 	.word	0x40011400
 8003408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800341a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800341e:	4642      	mov	r2, r8
 8003420:	464b      	mov	r3, r9
 8003422:	1891      	adds	r1, r2, r2
 8003424:	6239      	str	r1, [r7, #32]
 8003426:	415b      	adcs	r3, r3
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800342e:	4641      	mov	r1, r8
 8003430:	1854      	adds	r4, r2, r1
 8003432:	4649      	mov	r1, r9
 8003434:	eb43 0501 	adc.w	r5, r3, r1
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	00eb      	lsls	r3, r5, #3
 8003442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003446:	00e2      	lsls	r2, r4, #3
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	4643      	mov	r3, r8
 800344e:	18e3      	adds	r3, r4, r3
 8003450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003454:	464b      	mov	r3, r9
 8003456:	eb45 0303 	adc.w	r3, r5, r3
 800345a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800346a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800347a:	4629      	mov	r1, r5
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003484:	4621      	mov	r1, r4
 8003486:	008a      	lsls	r2, r1, #2
 8003488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800348c:	f7fc fef8 	bl	8000280 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4b60      	ldr	r3, [pc, #384]	; (8003618 <UART_SetConfig+0x4e4>)
 8003496:	fba3 2302 	umull	r2, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	011c      	lsls	r4, r3, #4
 800349e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	1891      	adds	r1, r2, r2
 80034b6:	61b9      	str	r1, [r7, #24]
 80034b8:	415b      	adcs	r3, r3
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c0:	4641      	mov	r1, r8
 80034c2:	1851      	adds	r1, r2, r1
 80034c4:	6139      	str	r1, [r7, #16]
 80034c6:	4649      	mov	r1, r9
 80034c8:	414b      	adcs	r3, r1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d8:	4659      	mov	r1, fp
 80034da:	00cb      	lsls	r3, r1, #3
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e2:	4651      	mov	r1, sl
 80034e4:	00ca      	lsls	r2, r1, #3
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	4642      	mov	r2, r8
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034f4:	464b      	mov	r3, r9
 80034f6:	460a      	mov	r2, r1
 80034f8:	eb42 0303 	adc.w	r3, r2, r3
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67bb      	str	r3, [r7, #120]	; 0x78
 800350a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003518:	4649      	mov	r1, r9
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003522:	4641      	mov	r1, r8
 8003524:	008a      	lsls	r2, r1, #2
 8003526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800352a:	f7fc fea9 	bl	8000280 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <UART_SetConfig+0x4e4>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <UART_SetConfig+0x4e4>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003552:	441c      	add	r4, r3
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	673b      	str	r3, [r7, #112]	; 0x70
 800355c:	677a      	str	r2, [r7, #116]	; 0x74
 800355e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	1891      	adds	r1, r2, r2
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	415b      	adcs	r3, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003572:	4641      	mov	r1, r8
 8003574:	1851      	adds	r1, r2, r1
 8003576:	6039      	str	r1, [r7, #0]
 8003578:	4649      	mov	r1, r9
 800357a:	414b      	adcs	r3, r1
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800358a:	4659      	mov	r1, fp
 800358c:	00cb      	lsls	r3, r1, #3
 800358e:	4651      	mov	r1, sl
 8003590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003594:	4651      	mov	r1, sl
 8003596:	00ca      	lsls	r2, r1, #3
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	4603      	mov	r3, r0
 800359e:	4642      	mov	r2, r8
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a4:	464b      	mov	r3, r9
 80035a6:	460a      	mov	r2, r1
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	663b      	str	r3, [r7, #96]	; 0x60
 80035b8:	667a      	str	r2, [r7, #100]	; 0x64
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035c6:	4649      	mov	r1, r9
 80035c8:	008b      	lsls	r3, r1, #2
 80035ca:	4641      	mov	r1, r8
 80035cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d0:	4641      	mov	r1, r8
 80035d2:	008a      	lsls	r2, r1, #2
 80035d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035d8:	f7fc fe52 	bl	8000280 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <UART_SetConfig+0x4e4>)
 80035e2:	fba3 1302 	umull	r1, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2164      	movs	r1, #100	; 0x64
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	3332      	adds	r3, #50	; 0x32
 80035f4:	4a08      	ldr	r2, [pc, #32]	; (8003618 <UART_SetConfig+0x4e4>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4422      	add	r2, r4
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003616:	bf00      	nop
 8003618:	51eb851f 	.word	0x51eb851f

0800361c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f103 0208 	add.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0208 	add.w	r2, r3, #8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f103 0208 	add.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d103      	bne.n	80036de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e00c      	b.n	80036f8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3308      	adds	r3, #8
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e002      	b.n	80036ec <vListInsert+0x2e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d2f6      	bcs.n	80036e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d103      	bne.n	8003764 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xQueueGenericReset+0x2a>
        __asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	60bb      	str	r3, [r7, #8]
    }
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80037ae:	f002 f9cb 	bl	8005b48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	68f9      	ldr	r1, [r7, #12]
 80037bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	3b01      	subs	r3, #1
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d114      	bne.n	800382e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01a      	beq.n	8003842 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3310      	adds	r3, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f001 f9a5 	bl	8004b60 <xTaskRemoveFromEventList>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <xQueueGenericReset+0xcc>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	e009      	b.n	8003842 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3310      	adds	r3, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fef2 	bl	800361c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3324      	adds	r3, #36	; 0x24
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff feed 	bl	800361c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003842:	f002 f9b1 	bl	8005ba8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003846:	2301      	movs	r3, #1
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	e000ed04 	.word	0xe000ed04

08003854 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	; 0x30
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xQueueGenericCreate+0x2a>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	61bb      	str	r3, [r7, #24]
    }
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <xQueueGenericCreate+0x48>
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	429a      	cmp	r2, r3
 800389a:	d101      	bne.n	80038a0 <xQueueGenericCreate+0x4c>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <xQueueGenericCreate+0x4e>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <xQueueGenericCreate+0x68>
        __asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	617b      	str	r3, [r7, #20]
    }
 80038b8:	bf00      	nop
 80038ba:	e7fe      	b.n	80038ba <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80038c2:	d90a      	bls.n	80038da <xQueueGenericCreate+0x86>
        __asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	613b      	str	r3, [r7, #16]
    }
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	3350      	adds	r3, #80	; 0x50
 80038de:	4618      	mov	r0, r3
 80038e0:	f002 fa54 	bl	8005d8c <pvPortMalloc>
 80038e4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3350      	adds	r3, #80	; 0x50
 80038f4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038f6:	79fa      	ldrb	r2, [r7, #7]
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f805 	bl	8003912 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003908:	6a3b      	ldr	r3, [r7, #32]
    }
 800390a:	4618      	mov	r0, r3
 800390c:	3728      	adds	r7, #40	; 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e002      	b.n	8003934 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003940:	2101      	movs	r1, #1
 8003942:	69b8      	ldr	r0, [r7, #24]
 8003944:	f7ff ff1e 	bl	8003784 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08e      	sub	sp, #56	; 0x38
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003966:	2300      	movs	r3, #0
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xQueueGenericSend+0x32>
        __asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <xQueueGenericSend+0x40>
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <xQueueGenericSend+0x44>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <xQueueGenericSend+0x46>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xQueueGenericSend+0x60>
        __asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSend+0x6e>
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <xQueueGenericSend+0x72>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericSend+0x74>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericSend+0x8e>
        __asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
    }
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039e6:	f001 fa57 	bl	8004e98 <xTaskGetSchedulerState>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <xQueueGenericSend+0x9e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xQueueGenericSend+0xa2>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <xQueueGenericSend+0xa4>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <xQueueGenericSend+0xbe>
        __asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61fb      	str	r3, [r7, #28]
    }
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a16:	f002 f897 	bl	8005b48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <xQueueGenericSend+0xd4>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d129      	bne.n	8003a80 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a32:	f000 fb3d 	bl	80040b0 <prvCopyDataToQueue>
 8003a36:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	3324      	adds	r3, #36	; 0x24
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 f88b 	bl	8004b60 <xTaskRemoveFromEventList>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003a50:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <xQueueGenericSend+0x1f8>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	e00a      	b.n	8003a78 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003a68:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <xQueueGenericSend+0x1f8>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003a78:	f002 f896 	bl	8005ba8 <vPortExitCritical>
                return pdPASS;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e063      	b.n	8003b48 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003a86:	f002 f88f 	bl	8005ba8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e05c      	b.n	8003b48 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f8c3 	bl	8004c24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003aa2:	f002 f881 	bl	8005ba8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003aa6:	f000 fe3d 	bl	8004724 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003aaa:	f002 f84d 	bl	8005b48 <vPortEnterCritical>
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d103      	bne.n	8003ac4 <xQueueGenericSend+0x16c>
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d103      	bne.n	8003ada <xQueueGenericSend+0x182>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ada:	f002 f865 	bl	8005ba8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ade:	1d3a      	adds	r2, r7, #4
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 f8b2 	bl	8004c50 <xTaskCheckForTimeOut>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d124      	bne.n	8003b3c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af4:	f000 fbd4 	bl	80042a0 <prvIsQueueFull>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d018      	beq.n	8003b30 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	3310      	adds	r3, #16
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 ffda 	bl	8004ac0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0e:	f000 fb5f 	bl	80041d0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003b12:	f000 fe15 	bl	8004740 <xTaskResumeAll>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f47f af7c 	bne.w	8003a16 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <xQueueGenericSend+0x1f8>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	e772      	b.n	8003a16 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b32:	f000 fb4d 	bl	80041d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b36:	f000 fe03 	bl	8004740 <xTaskResumeAll>
 8003b3a:	e76c      	b.n	8003a16 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3e:	f000 fb47 	bl	80041d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b42:	f000 fdfd 	bl	8004740 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003b46:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3738      	adds	r7, #56	; 0x38
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b090      	sub	sp, #64	; 0x40
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <xQueueGenericSendFromISR+0x3c>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <xQueueGenericSendFromISR+0x40>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <xQueueGenericSendFromISR+0x42>
 8003b94:	2300      	movs	r3, #0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d103      	bne.n	8003bbe <xQueueGenericSendFromISR+0x6a>
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <xQueueGenericSendFromISR+0x6e>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <xQueueGenericSendFromISR+0x70>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	623b      	str	r3, [r7, #32]
    }
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bde:	f002 f895 	bl	8005d0c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003be2:	f3ef 8211 	mrs	r2, BASEPRI
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	61fa      	str	r2, [r7, #28]
 8003bf8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d302      	bcc.n	8003c10 <xQueueGenericSendFromISR+0xbc>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d13e      	bne.n	8003c8e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c26:	f000 fa43 	bl	80040b0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003c2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d112      	bne.n	8003c5a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d025      	beq.n	8003c88 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	3324      	adds	r3, #36	; 0x24
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 ff8d 	bl	8004b60 <xTaskRemoveFromEventList>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01d      	beq.n	8003c88 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01a      	beq.n	8003c88 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e016      	b.n	8003c88 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003c5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c60:	d10a      	bne.n	8003c78 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	617b      	str	r3, [r7, #20]
    }
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003c8c:	e001      	b.n	8003c92 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003c9c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3740      	adds	r7, #64	; 0x40
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xQueueReceive+0x30>
        __asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	623b      	str	r3, [r7, #32]
    }
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <xQueueReceive+0x3e>
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <xQueueReceive+0x42>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <xQueueReceive+0x44>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueReceive+0x5e>
        __asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61fb      	str	r3, [r7, #28]
    }
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d06:	f001 f8c7 	bl	8004e98 <xTaskGetSchedulerState>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <xQueueReceive+0x6e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <xQueueReceive+0x72>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <xQueueReceive+0x74>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xQueueReceive+0x8e>
        __asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	61bb      	str	r3, [r7, #24]
    }
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d36:	f001 ff07 	bl	8005b48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01f      	beq.n	8003d86 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4a:	f000 fa1b 	bl	8004184 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1e5a      	subs	r2, r3, #1
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00f      	beq.n	8003d7e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	3310      	adds	r3, #16
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fefc 	bl	8004b60 <xTaskRemoveFromEventList>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <xQueueReceive+0x1bc>)
 8003d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d7e:	f001 ff13 	bl	8005ba8 <vPortExitCritical>
                return pdPASS;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e069      	b.n	8003e5a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d8c:	f001 ff0c 	bl	8005ba8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e062      	b.n	8003e5a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d9a:	f107 0310 	add.w	r3, r7, #16
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 ff40 	bl	8004c24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003da8:	f001 fefe 	bl	8005ba8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003dac:	f000 fcba 	bl	8004724 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003db0:	f001 feca 	bl	8005b48 <vPortEnterCritical>
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueReceive+0x122>
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d103      	bne.n	8003de0 <xQueueReceive+0x138>
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	f001 fee2 	bl	8005ba8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de4:	1d3a      	adds	r2, r7, #4
 8003de6:	f107 0310 	add.w	r3, r7, #16
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 ff2f 	bl	8004c50 <xTaskCheckForTimeOut>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d123      	bne.n	8003e40 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfa:	f000 fa3b 	bl	8004274 <prvIsQueueEmpty>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	3324      	adds	r3, #36	; 0x24
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fe57 	bl	8004ac0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e14:	f000 f9dc 	bl	80041d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003e18:	f000 fc92 	bl	8004740 <xTaskResumeAll>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d189      	bne.n	8003d36 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <xQueueReceive+0x1bc>)
 8003e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	e780      	b.n	8003d36 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e36:	f000 f9cb 	bl	80041d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e3a:	f000 fc81 	bl	8004740 <xTaskResumeAll>
 8003e3e:	e77a      	b.n	8003d36 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e42:	f000 f9c5 	bl	80041d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e46:	f000 fc7b 	bl	8004740 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4c:	f000 fa12 	bl	8004274 <prvIsQueueEmpty>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f43f af6f 	beq.w	8003d36 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003e58:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3730      	adds	r7, #48	; 0x30
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08e      	sub	sp, #56	; 0x38
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	623b      	str	r3, [r7, #32]
    }
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	61fb      	str	r3, [r7, #28]
    }
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eb8:	f000 ffee 	bl	8004e98 <xTaskGetSchedulerState>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <xQueueSemaphoreTake+0x60>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <xQueueSemaphoreTake+0x64>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <xQueueSemaphoreTake+0x66>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	61bb      	str	r3, [r7, #24]
    }
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003ee8:	f001 fe2e 	bl	8005b48 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d024      	beq.n	8003f42 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f08:	f001 f962 	bl	80051d0 <pvTaskIncrementMutexHeldCount>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	3310      	adds	r3, #16
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fe1e 	bl	8004b60 <xTaskRemoveFromEventList>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <xQueueSemaphoreTake+0x214>)
 8003f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003f3a:	f001 fe35 	bl	8005ba8 <vPortExitCritical>
                return pdPASS;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e097      	b.n	8004072 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d111      	bne.n	8003f6c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	617b      	str	r3, [r7, #20]
    }
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003f64:	f001 fe20 	bl	8005ba8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e082      	b.n	8004072 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003f72:	f107 030c 	add.w	r3, r7, #12
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fe54 	bl	8004c24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003f80:	f001 fe12 	bl	8005ba8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003f84:	f000 fbce 	bl	8004724 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003f88:	f001 fdde 	bl	8005b48 <vPortEnterCritical>
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f92:	b25b      	sxtb	r3, r3
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d103      	bne.n	8003fa2 <xQueueSemaphoreTake+0x13a>
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa8:	b25b      	sxtb	r3, r3
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d103      	bne.n	8003fb8 <xQueueSemaphoreTake+0x150>
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb8:	f001 fdf6 	bl	8005ba8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fbc:	463a      	mov	r2, r7
 8003fbe:	f107 030c 	add.w	r3, r7, #12
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fe43 	bl	8004c50 <xTaskCheckForTimeOut>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d132      	bne.n	8004036 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fd2:	f000 f94f 	bl	8004274 <prvIsQueueEmpty>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d026      	beq.n	800402a <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003fe4:	f001 fdb0 	bl	8005b48 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ff71 	bl	8004ed4 <xTaskPriorityInherit>
 8003ff2:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003ff4:	f001 fdd8 	bl	8005ba8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	3324      	adds	r3, #36	; 0x24
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fd5d 	bl	8004ac0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004008:	f000 f8e2 	bl	80041d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800400c:	f000 fb98 	bl	8004740 <xTaskResumeAll>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	f47f af68 	bne.w	8003ee8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <xQueueSemaphoreTake+0x214>)
 800401a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	e75e      	b.n	8003ee8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800402a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800402c:	f000 f8d0 	bl	80041d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004030:	f000 fb86 	bl	8004740 <xTaskResumeAll>
 8004034:	e758      	b.n	8003ee8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004038:	f000 f8ca 	bl	80041d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800403c:	f000 fb80 	bl	8004740 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004042:	f000 f917 	bl	8004274 <prvIsQueueEmpty>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	f43f af4d 	beq.w	8003ee8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8004054:	f001 fd78 	bl	8005b48 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800405a:	f000 f811 	bl	8004080 <prvGetDisinheritPriorityAfterTimeout>
 800405e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f824 	bl	80050b4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800406c:	f001 fd9c 	bl	8005ba8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004070:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004072:	4618      	mov	r0, r3
 8004074:	3738      	adds	r7, #56	; 0x38
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d006      	beq.n	800409e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1c3 0305 	rsb	r3, r3, #5
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e001      	b.n	80040a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80040a2:	68fb      	ldr	r3, [r7, #12]
    }
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d14d      	bne.n	8004172 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ff70 	bl	8004fc0 <xTaskPriorityDisinherit>
 80040e0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	e043      	b.n	8004172 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d119      	bne.n	8004124 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6858      	ldr	r0, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	461a      	mov	r2, r3
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	f002 f86e 	bl	80061dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	441a      	add	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d32b      	bcc.n	8004172 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	e026      	b.n	8004172 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68d8      	ldr	r0, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	461a      	mov	r2, r3
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	f002 f854 	bl	80061dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	425b      	negs	r3, r3
 800413e:	441a      	add	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d207      	bcs.n	8004160 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	425b      	negs	r3, r3
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d105      	bne.n	8004172 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3b01      	subs	r3, #1
 8004170:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800417a:	697b      	ldr	r3, [r7, #20]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d303      	bcc.n	80041b8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68d9      	ldr	r1, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	461a      	mov	r2, r3
 80041c2:	6838      	ldr	r0, [r7, #0]
 80041c4:	f002 f80a 	bl	80061dc <memcpy>
    }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80041d8:	f001 fcb6 	bl	8005b48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041e4:	e011      	b.n	800420a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fcb4 	bl	8004b60 <xTaskRemoveFromEventList>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80041fe:	f000 fd8d 	bl	8004d1c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3b01      	subs	r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800420a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	dce9      	bgt.n	80041e6 <prvUnlockQueue+0x16>
 8004212:	e000      	b.n	8004216 <prvUnlockQueue+0x46>
                        break;
 8004214:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800421e:	f001 fcc3 	bl	8005ba8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004222:	f001 fc91 	bl	8005b48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800422e:	e011      	b.n	8004254 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3310      	adds	r3, #16
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fc8f 	bl	8004b60 <xTaskRemoveFromEventList>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004248:	f000 fd68 	bl	8004d1c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	3b01      	subs	r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004258:	2b00      	cmp	r3, #0
 800425a:	dce9      	bgt.n	8004230 <prvUnlockQueue+0x60>
 800425c:	e000      	b.n	8004260 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800425e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004268:	f001 fc9e 	bl	8005ba8 <vPortExitCritical>
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800427c:	f001 fc64 	bl	8005b48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e001      	b.n	8004292 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004292:	f001 fc89 	bl	8005ba8 <vPortExitCritical>

    return xReturn;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80042a8:	f001 fc4e 	bl	8005b48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d102      	bne.n	80042be <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e001      	b.n	80042c2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80042c2:	f001 fc71 	bl	8005ba8 <vPortExitCritical>

    return xReturn;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e014      	b.n	800430a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042e0:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <vQueueAddToRegistry+0x50>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042ec:	490c      	ldr	r1, [pc, #48]	; (8004320 <vQueueAddToRegistry+0x50>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <vQueueAddToRegistry+0x50>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004302:	e006      	b.n	8004312 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3301      	adds	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b07      	cmp	r3, #7
 800430e:	d9e7      	bls.n	80042e0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	2000014c 	.word	0x2000014c

08004324 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004334:	f001 fc08 	bl	8005b48 <vPortEnterCritical>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800433e:	b25b      	sxtb	r3, r3
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d103      	bne.n	800434e <vQueueWaitForMessageRestricted+0x2a>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004354:	b25b      	sxtb	r3, r3
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d103      	bne.n	8004364 <vQueueWaitForMessageRestricted+0x40>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	f001 fc20 	bl	8005ba8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fbc5 	bl	8004b08 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff26 	bl	80041d0 <prvUnlockQueue>
    }
 8004384:	bf00      	nop
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	; 0x30
 8004390:	af04      	add	r7, sp, #16
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 fcf3 	bl	8005d8c <pvPortMalloc>
 80043a6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00e      	beq.n	80043cc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043ae:	2058      	movs	r0, #88	; 0x58
 80043b0:	f001 fcec 	bl	8005d8c <pvPortMalloc>
 80043b4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
 80043c2:	e005      	b.n	80043d0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80043c4:	6978      	ldr	r0, [r7, #20]
 80043c6:	f001 fdc1 	bl	8005f4c <vPortFree>
 80043ca:	e001      	b.n	80043d0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d013      	beq.n	80043fe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	2300      	movs	r3, #0
 80043da:	9303      	str	r3, [sp, #12]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f80e 	bl	800440e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80043f2:	69f8      	ldr	r0, [r7, #28]
 80043f4:	f000 f8a2 	bl	800453c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80043f8:	2301      	movs	r3, #1
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e002      	b.n	8004404 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004402:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004404:	69bb      	ldr	r3, [r7, #24]
    }
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b088      	sub	sp, #32
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	461a      	mov	r2, r3
 8004426:	21a5      	movs	r1, #165	; 0xa5
 8004428:	f001 fee6 	bl	80061f8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004436:	3b01      	subs	r3, #1
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	617b      	str	r3, [r7, #20]
    }
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01f      	beq.n	80044ac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	e012      	b.n	8004498 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	7819      	ldrb	r1, [r3, #0]
 800447a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	3334      	adds	r3, #52	; 0x34
 8004482:	460a      	mov	r2, r1
 8004484:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b09      	cmp	r3, #9
 800449c:	d9e9      	bls.n	8004472 <prvInitialiseNewTask+0x64>
 800449e:	e000      	b.n	80044a2 <prvInitialiseNewTask+0x94>
            {
                break;
 80044a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044aa:	e003      	b.n	80044b4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d901      	bls.n	80044be <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044ba:	2304      	movs	r3, #4
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f8c1 	bl	800365c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	3318      	adds	r3, #24
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff f8bc 	bl	800365c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	f1c3 0205 	rsb	r2, r3, #5
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	3350      	adds	r3, #80	; 0x50
 80044fe:	2204      	movs	r2, #4
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fe78 	bl	80061f8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	3354      	adds	r3, #84	; 0x54
 800450c:	2201      	movs	r2, #1
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f001 fe71 	bl	80061f8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	69b8      	ldr	r0, [r7, #24]
 800451c:	f001 f9e4 	bl	80058e8 <pxPortInitialiseStack>
 8004520:	4602      	mov	r2, r0
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004532:	bf00      	nop
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004544:	f001 fb00 	bl	8005b48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <prvAddNewTaskToReadyList+0xc0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <prvAddNewTaskToReadyList+0xc0>)
 8004550:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <prvAddNewTaskToReadyList+0xc4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <prvAddNewTaskToReadyList+0xc4>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004560:	4b26      	ldr	r3, [pc, #152]	; (80045fc <prvAddNewTaskToReadyList+0xc0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d110      	bne.n	800458a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004568:	f000 fbfc 	bl	8004d64 <prvInitialiseTaskLists>
 800456c:	e00d      	b.n	800458a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800456e:	4b25      	ldr	r3, [pc, #148]	; (8004604 <prvAddNewTaskToReadyList+0xc8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <prvAddNewTaskToReadyList+0xc4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	429a      	cmp	r2, r3
 8004582:	d802      	bhi.n	800458a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <prvAddNewTaskToReadyList+0xc4>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800458a:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <prvAddNewTaskToReadyList+0xcc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <prvAddNewTaskToReadyList+0xcc>)
 8004592:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004594:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <prvAddNewTaskToReadyList+0xcc>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <prvAddNewTaskToReadyList+0xd0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	4a18      	ldr	r2, [pc, #96]	; (800460c <prvAddNewTaskToReadyList+0xd0>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <prvAddNewTaskToReadyList+0xd4>)
 80045bc:	441a      	add	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7ff f856 	bl	8003676 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80045ca:	f001 faed 	bl	8005ba8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <prvAddNewTaskToReadyList+0xc8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <prvAddNewTaskToReadyList+0xc4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d207      	bcs.n	80045f4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <prvAddNewTaskToReadyList+0xd8>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000264 	.word	0x20000264
 8004600:	2000018c 	.word	0x2000018c
 8004604:	20000270 	.word	0x20000270
 8004608:	20000280 	.word	0x20000280
 800460c:	2000026c 	.word	0x2000026c
 8004610:	20000190 	.word	0x20000190
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d017      	beq.n	800465a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <vTaskDelay+0x60>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <vTaskDelay+0x30>
        __asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60bb      	str	r3, [r7, #8]
    }
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004648:	f000 f86c 	bl	8004724 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800464c:	2100      	movs	r1, #0
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fdd2 	bl	80051f8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004654:	f000 f874 	bl	8004740 <xTaskResumeAll>
 8004658:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <vTaskDelay+0x64>)
 8004662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	2000028c 	.word	0x2000028c
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <vTaskStartScheduler+0x88>)
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	2300      	movs	r3, #0
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2300      	movs	r3, #0
 8004690:	2282      	movs	r2, #130	; 0x82
 8004692:	491e      	ldr	r1, [pc, #120]	; (800470c <vTaskStartScheduler+0x8c>)
 8004694:	481e      	ldr	r0, [pc, #120]	; (8004710 <vTaskStartScheduler+0x90>)
 8004696:	f7ff fe79 	bl	800438c <xTaskCreate>
 800469a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80046a2:	f000 fe0f 	bl	80052c4 <xTimerCreateTimerTask>
 80046a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d116      	bne.n	80046dc <vTaskStartScheduler+0x5c>
        __asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	60bb      	str	r3, [r7, #8]
    }
 80046c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <vTaskStartScheduler+0x94>)
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <vTaskStartScheduler+0x98>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <vTaskStartScheduler+0x9c>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80046d6:	f001 f995 	bl	8005a04 <xPortStartScheduler>
 80046da:	e00e      	b.n	80046fa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d10a      	bne.n	80046fa <vTaskStartScheduler+0x7a>
        __asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	607b      	str	r3, [r7, #4]
    }
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <vTaskStartScheduler+0xa0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000288 	.word	0x20000288
 800470c:	0800772c 	.word	0x0800772c
 8004710:	08004d35 	.word	0x08004d35
 8004714:	20000284 	.word	0x20000284
 8004718:	20000270 	.word	0x20000270
 800471c:	20000268 	.word	0x20000268
 8004720:	20000020 	.word	0x20000020

08004724 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <vTaskSuspendAll+0x18>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	4a03      	ldr	r2, [pc, #12]	; (800473c <vTaskSuspendAll+0x18>)
 8004730:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	2000028c 	.word	0x2000028c

08004740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <xTaskResumeAll+0x114>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <xTaskResumeAll+0x2c>
        __asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	603b      	str	r3, [r7, #0]
    }
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800476c:	f001 f9ec 	bl	8005b48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004770:	4b38      	ldr	r3, [pc, #224]	; (8004854 <xTaskResumeAll+0x114>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	4a37      	ldr	r2, [pc, #220]	; (8004854 <xTaskResumeAll+0x114>)
 8004778:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477a:	4b36      	ldr	r3, [pc, #216]	; (8004854 <xTaskResumeAll+0x114>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d161      	bne.n	8004846 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004782:	4b35      	ldr	r3, [pc, #212]	; (8004858 <xTaskResumeAll+0x118>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d05d      	beq.n	8004846 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800478a:	e02e      	b.n	80047ea <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478c:	4b33      	ldr	r3, [pc, #204]	; (800485c <xTaskResumeAll+0x11c>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3318      	adds	r3, #24
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe ffc9 	bl	8003730 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe ffc4 	bl	8003730 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	409a      	lsls	r2, r3
 80047b0:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <xTaskResumeAll+0x120>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <xTaskResumeAll+0x120>)
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4a27      	ldr	r2, [pc, #156]	; (8004864 <xTaskResumeAll+0x124>)
 80047c8:	441a      	add	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f7fe ff50 	bl	8003676 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <xTaskResumeAll+0x128>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d302      	bcc.n	80047ea <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80047e4:	4b21      	ldr	r3, [pc, #132]	; (800486c <xTaskResumeAll+0x12c>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ea:	4b1c      	ldr	r3, [pc, #112]	; (800485c <xTaskResumeAll+0x11c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1cc      	bne.n	800478c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80047f8:	f000 fb32 	bl	8004e60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <xTaskResumeAll+0x130>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004808:	f000 f846 	bl	8004898 <xTaskIncrementTick>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004812:	4b16      	ldr	r3, [pc, #88]	; (800486c <xTaskResumeAll+0x12c>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3b01      	subs	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f1      	bne.n	8004808 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <xTaskResumeAll+0x130>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <xTaskResumeAll+0x12c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <xTaskResumeAll+0x134>)
 8004838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004846:	f001 f9af 	bl	8005ba8 <vPortExitCritical>

    return xAlreadyYielded;
 800484a:	68bb      	ldr	r3, [r7, #8]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	2000028c 	.word	0x2000028c
 8004858:	20000264 	.word	0x20000264
 800485c:	20000224 	.word	0x20000224
 8004860:	2000026c 	.word	0x2000026c
 8004864:	20000190 	.word	0x20000190
 8004868:	2000018c 	.word	0x2000018c
 800486c:	20000278 	.word	0x20000278
 8004870:	20000274 	.word	0x20000274
 8004874:	e000ed04 	.word	0xe000ed04

08004878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <xTaskGetTickCount+0x1c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004884:	687b      	ldr	r3, [r7, #4]
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000268 	.word	0x20000268

08004898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a2:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <xTaskIncrementTick+0x144>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 808e 	bne.w	80049c8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048ac:	4b4c      	ldr	r3, [pc, #304]	; (80049e0 <xTaskIncrementTick+0x148>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80048b4:	4a4a      	ldr	r2, [pc, #296]	; (80049e0 <xTaskIncrementTick+0x148>)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d120      	bne.n	8004902 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80048c0:	4b48      	ldr	r3, [pc, #288]	; (80049e4 <xTaskIncrementTick+0x14c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <xTaskIncrementTick+0x48>
        __asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	603b      	str	r3, [r7, #0]
    }
 80048dc:	bf00      	nop
 80048de:	e7fe      	b.n	80048de <xTaskIncrementTick+0x46>
 80048e0:	4b40      	ldr	r3, [pc, #256]	; (80049e4 <xTaskIncrementTick+0x14c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <xTaskIncrementTick+0x150>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3e      	ldr	r2, [pc, #248]	; (80049e4 <xTaskIncrementTick+0x14c>)
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4a3e      	ldr	r2, [pc, #248]	; (80049e8 <xTaskIncrementTick+0x150>)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <xTaskIncrementTick+0x154>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	4a3c      	ldr	r2, [pc, #240]	; (80049ec <xTaskIncrementTick+0x154>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	f000 faaf 	bl	8004e60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004902:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <xTaskIncrementTick+0x158>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	429a      	cmp	r2, r3
 800490a:	d348      	bcc.n	800499e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490c:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <xTaskIncrementTick+0x14c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004916:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <xTaskIncrementTick+0x158>)
 8004918:	f04f 32ff 	mov.w	r2, #4294967295
 800491c:	601a      	str	r2, [r3, #0]
                    break;
 800491e:	e03e      	b.n	800499e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <xTaskIncrementTick+0x14c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d203      	bcs.n	8004940 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004938:	4a2d      	ldr	r2, [pc, #180]	; (80049f0 <xTaskIncrementTick+0x158>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800493e:	e02e      	b.n	800499e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3304      	adds	r3, #4
 8004944:	4618      	mov	r0, r3
 8004946:	f7fe fef3 	bl	8003730 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	3318      	adds	r3, #24
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe feea 	bl	8003730 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	2201      	movs	r2, #1
 8004962:	409a      	lsls	r2, r3
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <xTaskIncrementTick+0x15c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4313      	orrs	r3, r2
 800496a:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <xTaskIncrementTick+0x15c>)
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <xTaskIncrementTick+0x160>)
 800497c:	441a      	add	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fe fe76 	bl	8003676 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498e:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <xTaskIncrementTick+0x164>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	429a      	cmp	r2, r3
 8004996:	d3b9      	bcc.n	800490c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800499c:	e7b6      	b.n	800490c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <xTaskIncrementTick+0x164>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4914      	ldr	r1, [pc, #80]	; (80049f8 <xTaskIncrementTick+0x160>)
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d901      	bls.n	80049ba <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <xTaskIncrementTick+0x168>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e004      	b.n	80049d2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <xTaskIncrementTick+0x16c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <xTaskIncrementTick+0x16c>)
 80049d0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80049d2:	697b      	ldr	r3, [r7, #20]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	2000028c 	.word	0x2000028c
 80049e0:	20000268 	.word	0x20000268
 80049e4:	2000021c 	.word	0x2000021c
 80049e8:	20000220 	.word	0x20000220
 80049ec:	2000027c 	.word	0x2000027c
 80049f0:	20000284 	.word	0x20000284
 80049f4:	2000026c 	.word	0x2000026c
 80049f8:	20000190 	.word	0x20000190
 80049fc:	2000018c 	.word	0x2000018c
 8004a00:	20000278 	.word	0x20000278
 8004a04:	20000274 	.word	0x20000274

08004a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a0e:	4b27      	ldr	r3, [pc, #156]	; (8004aac <vTaskSwitchContext+0xa4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004a16:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <vTaskSwitchContext+0xa8>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004a1c:	e03f      	b.n	8004a9e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <vTaskSwitchContext+0xa8>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <vTaskSwitchContext+0xac>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	f1c3 031f 	rsb	r3, r3, #31
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	491f      	ldr	r1, [pc, #124]	; (8004ab8 <vTaskSwitchContext+0xb0>)
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	607b      	str	r3, [r7, #4]
    }
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <vTaskSwitchContext+0x5a>
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <vTaskSwitchContext+0xb0>)
 8004a70:	4413      	add	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3308      	adds	r3, #8
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d104      	bne.n	8004a94 <vTaskSwitchContext+0x8c>
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <vTaskSwitchContext+0xb4>)
 8004a9c:	6013      	str	r3, [r2, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	2000028c 	.word	0x2000028c
 8004ab0:	20000278 	.word	0x20000278
 8004ab4:	2000026c 	.word	0x2000026c
 8004ab8:	20000190 	.word	0x20000190
 8004abc:	2000018c 	.word	0x2000018c

08004ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
    }
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <vTaskPlaceOnEventList+0x44>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3318      	adds	r3, #24
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe fde5 	bl	80036be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004af4:	2101      	movs	r1, #1
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f000 fb7e 	bl	80051f8 <prvAddCurrentTaskToDelayedList>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	2000018c 	.word	0x2000018c

08004b08 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	617b      	str	r3, [r7, #20]
    }
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3318      	adds	r3, #24
 8004b36:	4619      	mov	r1, r3
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fe fd9c 	bl	8003676 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
 8004b48:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	68b8      	ldr	r0, [r7, #8]
 8004b4e:	f000 fb53 	bl	80051f8 <prvAddCurrentTaskToDelayedList>
    }
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	2000018c 	.word	0x2000018c

08004b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60fb      	str	r3, [r7, #12]
    }
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3318      	adds	r3, #24
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fdcd 	bl	8003730 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <xTaskRemoveFromEventList+0xac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11c      	bne.n	8004bd8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fdc4 	bl	8003730 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <xTaskRemoveFromEventList+0xb0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <xTaskRemoveFromEventList+0xb0>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <xTaskRemoveFromEventList+0xb4>)
 8004bc8:	441a      	add	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7fe fd50 	bl	8003676 <vListInsertEnd>
 8004bd6:	e005      	b.n	8004be4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	480e      	ldr	r0, [pc, #56]	; (8004c18 <xTaskRemoveFromEventList+0xb8>)
 8004be0:	f7fe fd49 	bl	8003676 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <xTaskRemoveFromEventList+0xbc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d905      	bls.n	8004bfe <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <xTaskRemoveFromEventList+0xc0>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e001      	b.n	8004c02 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004c02:	697b      	ldr	r3, [r7, #20]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	2000028c 	.word	0x2000028c
 8004c10:	2000026c 	.word	0x2000026c
 8004c14:	20000190 	.word	0x20000190
 8004c18:	20000224 	.word	0x20000224
 8004c1c:	2000018c 	.word	0x2000018c
 8004c20:	20000278 	.word	0x20000278

08004c24 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <vTaskInternalSetTimeOutState+0x24>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <vTaskInternalSetTimeOutState+0x28>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	605a      	str	r2, [r3, #4]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	2000027c 	.word	0x2000027c
 8004c4c:	20000268 	.word	0x20000268

08004c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
    }
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60fb      	str	r3, [r7, #12]
    }
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004c92:	f000 ff59 	bl	8005b48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004c96:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <xTaskCheckForTimeOut+0xc4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d102      	bne.n	8004cb6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	e026      	b.n	8004d04 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <xTaskCheckForTimeOut+0xc8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d00a      	beq.n	8004cd8 <xTaskCheckForTimeOut+0x88>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d305      	bcc.n	8004cd8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e015      	b.n	8004d04 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20b      	bcs.n	8004cfa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff ff98 	bl	8004c24 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e004      	b.n	8004d04 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004d04:	f000 ff50 	bl	8005ba8 <vPortExitCritical>

    return xReturn;
 8004d08:	69fb      	ldr	r3, [r7, #28]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000268 	.word	0x20000268
 8004d18:	2000027c 	.word	0x2000027c

08004d1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <vTaskMissedYield+0x14>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20000278 	.word	0x20000278

08004d34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004d3c:	f000 f852 	bl	8004de4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <prvIdleTask+0x28>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d9f9      	bls.n	8004d3c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <prvIdleTask+0x2c>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004d58:	e7f0      	b.n	8004d3c <prvIdleTask+0x8>
 8004d5a:	bf00      	nop
 8004d5c:	20000190 	.word	0x20000190
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	e00c      	b.n	8004d8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <prvInitialiseTaskLists+0x60>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fc4c 	bl	800361c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d9ef      	bls.n	8004d70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004d90:	480d      	ldr	r0, [pc, #52]	; (8004dc8 <prvInitialiseTaskLists+0x64>)
 8004d92:	f7fe fc43 	bl	800361c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004d96:	480d      	ldr	r0, [pc, #52]	; (8004dcc <prvInitialiseTaskLists+0x68>)
 8004d98:	f7fe fc40 	bl	800361c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004d9c:	480c      	ldr	r0, [pc, #48]	; (8004dd0 <prvInitialiseTaskLists+0x6c>)
 8004d9e:	f7fe fc3d 	bl	800361c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004da2:	480c      	ldr	r0, [pc, #48]	; (8004dd4 <prvInitialiseTaskLists+0x70>)
 8004da4:	f7fe fc3a 	bl	800361c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004da8:	480b      	ldr	r0, [pc, #44]	; (8004dd8 <prvInitialiseTaskLists+0x74>)
 8004daa:	f7fe fc37 	bl	800361c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <prvInitialiseTaskLists+0x78>)
 8004db0:	4a05      	ldr	r2, [pc, #20]	; (8004dc8 <prvInitialiseTaskLists+0x64>)
 8004db2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <prvInitialiseTaskLists+0x7c>)
 8004db6:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <prvInitialiseTaskLists+0x68>)
 8004db8:	601a      	str	r2, [r3, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000190 	.word	0x20000190
 8004dc8:	200001f4 	.word	0x200001f4
 8004dcc:	20000208 	.word	0x20000208
 8004dd0:	20000224 	.word	0x20000224
 8004dd4:	20000238 	.word	0x20000238
 8004dd8:	20000250 	.word	0x20000250
 8004ddc:	2000021c 	.word	0x2000021c
 8004de0:	20000220 	.word	0x20000220

08004de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dea:	e019      	b.n	8004e20 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004dec:	f000 feac 	bl	8005b48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df0:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <prvCheckTasksWaitingTermination+0x50>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe fc97 	bl	8003730 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <prvCheckTasksWaitingTermination+0x54>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <prvCheckTasksWaitingTermination+0x54>)
 8004e0a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <prvCheckTasksWaitingTermination+0x58>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <prvCheckTasksWaitingTermination+0x58>)
 8004e14:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004e16:	f000 fec7 	bl	8005ba8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f810 	bl	8004e40 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <prvCheckTasksWaitingTermination+0x58>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e1      	bne.n	8004dec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000238 	.word	0x20000238
 8004e38:	20000264 	.word	0x20000264
 8004e3c:	2000024c 	.word	0x2000024c

08004e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 f87d 	bl	8005f4c <vPortFree>
                vPortFree( pxTCB );
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 f87a 	bl	8005f4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <prvResetNextTaskUnblockTime+0x30>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <prvResetNextTaskUnblockTime+0x34>)
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004e76:	e005      	b.n	8004e84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <prvResetNextTaskUnblockTime+0x30>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <prvResetNextTaskUnblockTime+0x34>)
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	2000021c 	.word	0x2000021c
 8004e94:	20000284 	.word	0x20000284

08004e98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <xTaskGetSchedulerState+0x34>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	e008      	b.n	8004ebe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <xTaskGetSchedulerState+0x38>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	e001      	b.n	8004ebe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004ebe:	687b      	ldr	r3, [r7, #4]
    }
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000270 	.word	0x20000270
 8004ed0:	2000028c 	.word	0x2000028c

08004ed4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d05e      	beq.n	8004fa8 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <xTaskPriorityInherit+0xe0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d24e      	bcs.n	8004f96 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	db06      	blt.n	8004f0e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f00:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <xTaskPriorityInherit+0xe0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	f1c3 0205 	rsb	r2, r3, #5
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6959      	ldr	r1, [r3, #20]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a26      	ldr	r2, [pc, #152]	; (8004fb8 <xTaskPriorityInherit+0xe4>)
 8004f20:	4413      	add	r3, r2
 8004f22:	4299      	cmp	r1, r3
 8004f24:	d12f      	bne.n	8004f86 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fc00 	bl	8003730 <uxListRemove>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	43da      	mvns	r2, r3
 8004f42:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <xTaskPriorityInherit+0xe8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4013      	ands	r3, r2
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <xTaskPriorityInherit+0xe8>)
 8004f4a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <xTaskPriorityInherit+0xe0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <xTaskPriorityInherit+0xe8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <xTaskPriorityInherit+0xe8>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <xTaskPriorityInherit+0xe4>)
 8004f76:	441a      	add	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7fe fb79 	bl	8003676 <vListInsertEnd>
 8004f84:	e004      	b.n	8004f90 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <xTaskPriorityInherit+0xe0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e008      	b.n	8004fa8 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <xTaskPriorityInherit+0xe0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d201      	bcs.n	8004fa8 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
    }
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	2000018c 	.word	0x2000018c
 8004fb8:	20000190 	.word	0x20000190
 8004fbc:	2000026c 	.word	0x2000026c

08004fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d063      	beq.n	800509e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004fd6:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <xTaskPriorityDisinherit+0xe8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d00a      	beq.n	8004ff6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60fb      	str	r3, [r7, #12]
    }
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60bb      	str	r3, [r7, #8]
    }
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005018:	1e5a      	subs	r2, r3, #1
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005026:	429a      	cmp	r2, r3
 8005028:	d039      	beq.n	800509e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d135      	bne.n	800509e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3304      	adds	r3, #4
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fb7a 	bl	8003730 <uxListRemove>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	2201      	movs	r2, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43da      	mvns	r2, r3
 800504e:	4b17      	ldr	r3, [pc, #92]	; (80050ac <xTaskPriorityDisinherit+0xec>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4013      	ands	r3, r2
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <xTaskPriorityDisinherit+0xec>)
 8005056:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	f1c3 0205 	rsb	r2, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	2201      	movs	r2, #1
 8005072:	409a      	lsls	r2, r3
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <xTaskPriorityDisinherit+0xec>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4313      	orrs	r3, r2
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <xTaskPriorityDisinherit+0xec>)
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <xTaskPriorityDisinherit+0xf0>)
 800508c:	441a      	add	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	3304      	adds	r3, #4
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7fe faee 	bl	8003676 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800509a:	2301      	movs	r3, #1
 800509c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800509e:	697b      	ldr	r3, [r7, #20]
    }
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	2000018c 	.word	0x2000018c
 80050ac:	2000026c 	.word	0x2000026c
 80050b0:	20000190 	.word	0x20000190

080050b4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d077      	beq.n	80051bc <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	60fb      	str	r3, [r7, #12]
    }
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d902      	bls.n	80050fa <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	e002      	b.n	8005100 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	429a      	cmp	r2, r3
 8005108:	d058      	beq.n	80051bc <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	429a      	cmp	r2, r3
 8005112:	d153      	bne.n	80051bc <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005114:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	429a      	cmp	r2, r3
 800511c:	d10a      	bne.n	8005134 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	60bb      	str	r3, [r7, #8]
    }
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	db04      	blt.n	8005152 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f1c3 0205 	rsb	r2, r3, #5
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	6959      	ldr	r1, [r3, #20]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005162:	4413      	add	r3, r2
 8005164:	4299      	cmp	r1, r3
 8005166:	d129      	bne.n	80051bc <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	3304      	adds	r3, #4
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe fadf 	bl	8003730 <uxListRemove>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	2201      	movs	r2, #1
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43da      	mvns	r2, r3
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4013      	ands	r3, r2
 800518a:	4a10      	ldr	r2, [pc, #64]	; (80051cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800518c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	2201      	movs	r2, #1
 8005194:	409a      	lsls	r2, r3
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4313      	orrs	r3, r2
 800519c:	4a0b      	ldr	r2, [pc, #44]	; (80051cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4a06      	ldr	r2, [pc, #24]	; (80051c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80051ae:	441a      	add	r2, r3
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7fe fa5d 	bl	8003676 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80051bc:	bf00      	nop
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	2000018c 	.word	0x2000018c
 80051c8:	20000190 	.word	0x20000190
 80051cc:	2000026c 	.word	0x2000026c

080051d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e2:	3201      	adds	r2, #1
 80051e4:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80051e6:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80051e8:	681b      	ldr	r3, [r3, #0]
    }
 80051ea:	4618      	mov	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	2000018c 	.word	0x2000018c

080051f8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005202:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005208:	4b28      	ldr	r3, [pc, #160]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3304      	adds	r3, #4
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fa8e 	bl	8003730 <uxListRemove>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	2201      	movs	r2, #1
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43da      	mvns	r2, r3
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4013      	ands	r3, r2
 800522e:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005230:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d10a      	bne.n	8005250 <prvAddCurrentTaskToDelayedList+0x58>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	481a      	ldr	r0, [pc, #104]	; (80052b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800524a:	f7fe fa14 	bl	8003676 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800524e:	e026      	b.n	800529e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4413      	add	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005258:	4b14      	ldr	r3, [pc, #80]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d209      	bcs.n	800527c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3304      	adds	r3, #4
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f7fe fa22 	bl	80036be <vListInsert>
}
 800527a:	e010      	b.n	800529e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3304      	adds	r3, #4
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f7fe fa18 	bl	80036be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	d202      	bcs.n	800529e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6013      	str	r3, [r2, #0]
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000268 	.word	0x20000268
 80052ac:	2000018c 	.word	0x2000018c
 80052b0:	2000026c 	.word	0x2000026c
 80052b4:	20000250 	.word	0x20000250
 80052b8:	20000220 	.word	0x20000220
 80052bc:	2000021c 	.word	0x2000021c
 80052c0:	20000284 	.word	0x20000284

080052c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80052ce:	f000 fad5 	bl	800587c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <xTimerCreateTimerTask+0x54>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <xTimerCreateTimerTask+0x58>)
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	2302      	movs	r3, #2
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052e8:	490d      	ldr	r1, [pc, #52]	; (8005320 <xTimerCreateTimerTask+0x5c>)
 80052ea:	480e      	ldr	r0, [pc, #56]	; (8005324 <xTimerCreateTimerTask+0x60>)
 80052ec:	f7ff f84e 	bl	800438c <xTaskCreate>
 80052f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	603b      	str	r3, [r7, #0]
    }
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800530e:	687b      	ldr	r3, [r7, #4]
    }
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	200002c0 	.word	0x200002c0
 800531c:	200002c4 	.word	0x200002c4
 8005320:	08007734 	.word	0x08007734
 8005324:	0800545d 	.word	0x0800545d

08005328 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xTimerGenericCommand+0x2e>
        __asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	623b      	str	r3, [r7, #32]
    }
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005356:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <xTimerGenericCommand+0x98>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d02a      	beq.n	80053b4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b05      	cmp	r3, #5
 800536e:	dc18      	bgt.n	80053a2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005370:	f7ff fd92 	bl	8004e98 <xTaskGetSchedulerState>
 8005374:	4603      	mov	r3, r0
 8005376:	2b02      	cmp	r3, #2
 8005378:	d109      	bne.n	800538e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <xTimerGenericCommand+0x98>)
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	f107 0114 	add.w	r1, r7, #20
 8005382:	2300      	movs	r3, #0
 8005384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005386:	f7fe fae7 	bl	8003958 <xQueueGenericSend>
 800538a:	6278      	str	r0, [r7, #36]	; 0x24
 800538c:	e012      	b.n	80053b4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <xTimerGenericCommand+0x98>)
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	f107 0114 	add.w	r1, r7, #20
 8005396:	2300      	movs	r3, #0
 8005398:	2200      	movs	r2, #0
 800539a:	f7fe fadd 	bl	8003958 <xQueueGenericSend>
 800539e:	6278      	str	r0, [r7, #36]	; 0x24
 80053a0:	e008      	b.n	80053b4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <xTimerGenericCommand+0x98>)
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	f107 0114 	add.w	r1, r7, #20
 80053aa:	2300      	movs	r3, #0
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	f7fe fbd1 	bl	8003b54 <xQueueGenericSendFromISR>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80053b6:	4618      	mov	r0, r3
 80053b8:	3728      	adds	r7, #40	; 0x28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200002c0 	.word	0x200002c0

080053c4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ce:	4b22      	ldr	r3, [pc, #136]	; (8005458 <prvProcessExpiredTimer+0x94>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	3304      	adds	r3, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe f9a7 	bl	8003730 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d022      	beq.n	8005436 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	18d1      	adds	r1, r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	6978      	ldr	r0, [r7, #20]
 80053fe:	f000 f8d1 	bl	80055a4 <prvInsertTimerInActiveList>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01f      	beq.n	8005448 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005408:	2300      	movs	r3, #0
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2300      	movs	r3, #0
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	2100      	movs	r1, #0
 8005412:	6978      	ldr	r0, [r7, #20]
 8005414:	f7ff ff88 	bl	8005328 <xTimerGenericCommand>
 8005418:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d113      	bne.n	8005448 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
    }
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	b2da      	uxtb	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	6978      	ldr	r0, [r7, #20]
 800544e:	4798      	blx	r3
    }
 8005450:	bf00      	nop
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	200002b8 	.word	0x200002b8

0800545c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005464:	f107 0308 	add.w	r3, r7, #8
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f857 	bl	800551c <prvGetNextExpireTime>
 800546e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4619      	mov	r1, r3
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f803 	bl	8005480 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800547a:	f000 f8d5 	bl	8005628 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800547e:	e7f1      	b.n	8005464 <prvTimerTask+0x8>

08005480 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800548a:	f7ff f94b 	bl	8004724 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800548e:	f107 0308 	add.w	r3, r7, #8
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f866 	bl	8005564 <prvSampleTimeNow>
 8005498:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d130      	bne.n	8005502 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <prvProcessTimerOrBlockTask+0x3c>
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d806      	bhi.n	80054bc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80054ae:	f7ff f947 	bl	8004740 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff ff85 	bl	80053c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80054ba:	e024      	b.n	8005506 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054c2:	4b13      	ldr	r3, [pc, #76]	; (8005510 <prvProcessTimerOrBlockTask+0x90>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <prvProcessTimerOrBlockTask+0x50>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <prvProcessTimerOrBlockTask+0x52>
 80054d0:	2300      	movs	r3, #0
 80054d2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <prvProcessTimerOrBlockTask+0x94>)
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f7fe ff1f 	bl	8004324 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80054e6:	f7ff f92b 	bl	8004740 <xTaskResumeAll>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <prvProcessTimerOrBlockTask+0x98>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
    }
 8005500:	e001      	b.n	8005506 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005502:	f7ff f91d 	bl	8004740 <xTaskResumeAll>
    }
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	200002bc 	.word	0x200002bc
 8005514:	200002c0 	.word	0x200002c0
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005524:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <prvGetNextExpireTime+0x44>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <prvGetNextExpireTime+0x16>
 800552e:	2201      	movs	r2, #1
 8005530:	e000      	b.n	8005534 <prvGetNextExpireTime+0x18>
 8005532:	2200      	movs	r2, #0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <prvGetNextExpireTime+0x44>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e001      	b.n	8005550 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005550:	68fb      	ldr	r3, [r7, #12]
    }
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	200002b8 	.word	0x200002b8

08005564 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800556c:	f7ff f984 	bl	8004878 <xTaskGetTickCount>
 8005570:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <prvSampleTimeNow+0x3c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	429a      	cmp	r2, r3
 800557a:	d205      	bcs.n	8005588 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800557c:	f000 f91a 	bl	80057b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e002      	b.n	800558e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800558e:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <prvSampleTimeNow+0x3c>)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005594:	68fb      	ldr	r3, [r7, #12]
    }
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200002c8 	.word	0x200002c8

080055a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d812      	bhi.n	80055f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	1ad2      	subs	r2, r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e01b      	b.n	8005616 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <prvInsertTimerInActiveList+0x7c>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7fe f868 	bl	80036be <vListInsert>
 80055ee:	e012      	b.n	8005616 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d206      	bcs.n	8005606 <prvInsertTimerInActiveList+0x62>
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d302      	bcc.n	8005606 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e007      	b.n	8005616 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005606:	4b07      	ldr	r3, [pc, #28]	; (8005624 <prvInsertTimerInActiveList+0x80>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fe f854 	bl	80036be <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005616:	697b      	ldr	r3, [r7, #20]
    }
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200002bc 	.word	0x200002bc
 8005624:	200002b8 	.word	0x200002b8

08005628 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005628:	b580      	push	{r7, lr}
 800562a:	b08c      	sub	sp, #48	; 0x30
 800562c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800562e:	e0ae      	b.n	800578e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f2c0 80aa 	blt.w	800578c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe f871 	bl	8003730 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ff87 	bl	8005564 <prvSampleTimeNow>
 8005656:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b09      	cmp	r3, #9
 800565c:	f200 8097 	bhi.w	800578e <prvProcessReceivedCommands+0x166>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <prvProcessReceivedCommands+0x40>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	08005691 	.word	0x08005691
 800566c:	08005691 	.word	0x08005691
 8005670:	08005691 	.word	0x08005691
 8005674:	08005705 	.word	0x08005705
 8005678:	08005719 	.word	0x08005719
 800567c:	08005763 	.word	0x08005763
 8005680:	08005691 	.word	0x08005691
 8005684:	08005691 	.word	0x08005691
 8005688:	08005705 	.word	0x08005705
 800568c:	08005719 	.word	0x08005719
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	18d1      	adds	r1, r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056b0:	f7ff ff78 	bl	80055a4 <prvInsertTimerInActiveList>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d069      	beq.n	800578e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056c0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d05e      	beq.n	800578e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	441a      	add	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	2300      	movs	r3, #0
 80056de:	2100      	movs	r1, #0
 80056e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056e2:	f7ff fe21 	bl	8005328 <xTimerGenericCommand>
 80056e6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d14f      	bne.n	800578e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	61bb      	str	r3, [r7, #24]
    }
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	b2da      	uxtb	r2, r3
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005716:	e03a      	b.n	800578e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	b2da      	uxtb	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	617b      	str	r3, [r7, #20]
    }
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	18d1      	adds	r1, r2, r3
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800575c:	f7ff ff22 	bl	80055a4 <prvInsertTimerInActiveList>
                        break;
 8005760:	e015      	b.n	800578e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005772:	f000 fbeb 	bl	8005f4c <vPortFree>
 8005776:	e00a      	b.n	800578e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800578a:	e000      	b.n	800578e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800578c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800578e:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <prvProcessReceivedCommands+0x188>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f107 0108 	add.w	r1, r7, #8
 8005796:	2200      	movs	r2, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fa85 	bl	8003ca8 <xQueueReceive>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f47f af45 	bne.w	8005630 <prvProcessReceivedCommands+0x8>
        }
    }
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	3728      	adds	r7, #40	; 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200002c0 	.word	0x200002c0

080057b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057ba:	e048      	b.n	800584e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057bc:	4b2d      	ldr	r3, [pc, #180]	; (8005874 <prvSwitchTimerLists+0xc0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c6:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <prvSwitchTimerLists+0xc0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fd ffab 	bl	8003730 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02e      	beq.n	800584e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d90e      	bls.n	8005820 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800580e:	4b19      	ldr	r3, [pc, #100]	; (8005874 <prvSwitchTimerLists+0xc0>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3304      	adds	r3, #4
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f7fd ff50 	bl	80036be <vListInsert>
 800581e:	e016      	b.n	800584e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005820:	2300      	movs	r3, #0
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	2100      	movs	r1, #0
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fd7c 	bl	8005328 <xTimerGenericCommand>
 8005830:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	603b      	str	r3, [r7, #0]
    }
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <prvSwitchTimerLists+0xc0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1b1      	bne.n	80057bc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <prvSwitchTimerLists+0xc0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <prvSwitchTimerLists+0xc4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a04      	ldr	r2, [pc, #16]	; (8005874 <prvSwitchTimerLists+0xc0>)
 8005864:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005866:	4a04      	ldr	r2, [pc, #16]	; (8005878 <prvSwitchTimerLists+0xc4>)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	6013      	str	r3, [r2, #0]
    }
 800586c:	bf00      	nop
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	200002b8 	.word	0x200002b8
 8005878:	200002bc 	.word	0x200002bc

0800587c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005880:	f000 f962 	bl	8005b48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <prvCheckForValidListAndQueue+0x54>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11d      	bne.n	80058c8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800588c:	4811      	ldr	r0, [pc, #68]	; (80058d4 <prvCheckForValidListAndQueue+0x58>)
 800588e:	f7fd fec5 	bl	800361c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005892:	4811      	ldr	r0, [pc, #68]	; (80058d8 <prvCheckForValidListAndQueue+0x5c>)
 8005894:	f7fd fec2 	bl	800361c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005898:	4b10      	ldr	r3, [pc, #64]	; (80058dc <prvCheckForValidListAndQueue+0x60>)
 800589a:	4a0e      	ldr	r2, [pc, #56]	; (80058d4 <prvCheckForValidListAndQueue+0x58>)
 800589c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800589e:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <prvCheckForValidListAndQueue+0x64>)
 80058a0:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <prvCheckForValidListAndQueue+0x5c>)
 80058a2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80058a4:	2200      	movs	r2, #0
 80058a6:	210c      	movs	r1, #12
 80058a8:	200a      	movs	r0, #10
 80058aa:	f7fd ffd3 	bl	8003854 <xQueueGenericCreate>
 80058ae:	4603      	mov	r3, r0
 80058b0:	4a07      	ldr	r2, [pc, #28]	; (80058d0 <prvCheckForValidListAndQueue+0x54>)
 80058b2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <prvCheckForValidListAndQueue+0x54>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <prvCheckForValidListAndQueue+0x54>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4908      	ldr	r1, [pc, #32]	; (80058e4 <prvCheckForValidListAndQueue+0x68>)
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fd04 	bl	80042d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058c8:	f000 f96e 	bl	8005ba8 <vPortExitCritical>
    }
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	200002c0 	.word	0x200002c0
 80058d4:	20000290 	.word	0x20000290
 80058d8:	200002a4 	.word	0x200002a4
 80058dc:	200002b8 	.word	0x200002b8
 80058e0:	200002bc 	.word	0x200002bc
 80058e4:	0800773c 	.word	0x0800773c

080058e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3b04      	subs	r3, #4
 80058f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005900:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b04      	subs	r3, #4
 8005906:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f023 0201 	bic.w	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3b04      	subs	r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005918:	4a0c      	ldr	r2, [pc, #48]	; (800594c <pxPortInitialiseStack+0x64>)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b14      	subs	r3, #20
 8005922:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3b04      	subs	r3, #4
 800592e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f06f 0202 	mvn.w	r2, #2
 8005936:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b20      	subs	r3, #32
 800593c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800593e:	68fb      	ldr	r3, [r7, #12]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	08005951 	.word	0x08005951

08005950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800595a:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <prvTaskExitError+0x54>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d00a      	beq.n	800597a <prvTaskExitError+0x2a>
        __asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	60fb      	str	r3, [r7, #12]
    }
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <prvTaskExitError+0x28>
        __asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	60bb      	str	r3, [r7, #8]
    }
 800598c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800598e:	bf00      	nop
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0fc      	beq.n	8005990 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	20000024 	.word	0x20000024
	...

080059b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <pxCurrentTCBConst2>)
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	6808      	ldr	r0, [r1, #0]
 80059b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	f380 8809 	msr	PSP, r0
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8811 	msr	BASEPRI, r0
 80059ca:	4770      	bx	lr
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst2>:
 80059d0:	2000018c 	.word	0x2000018c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80059d8:	4808      	ldr	r0, [pc, #32]	; (80059fc <prvPortStartFirstTask+0x24>)
 80059da:	6800      	ldr	r0, [r0, #0]
 80059dc:	6800      	ldr	r0, [r0, #0]
 80059de:	f380 8808 	msr	MSP, r0
 80059e2:	f04f 0000 	mov.w	r0, #0
 80059e6:	f380 8814 	msr	CONTROL, r0
 80059ea:	b662      	cpsie	i
 80059ec:	b661      	cpsie	f
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	df00      	svc	0
 80059f8:	bf00      	nop
 80059fa:	0000      	.short	0x0000
 80059fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop

08005a04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a0a:	4b46      	ldr	r3, [pc, #280]	; (8005b24 <xPortStartScheduler+0x120>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a46      	ldr	r2, [pc, #280]	; (8005b28 <xPortStartScheduler+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10a      	bne.n	8005a2a <xPortStartScheduler+0x26>
        __asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	613b      	str	r3, [r7, #16]
    }
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a2a:	4b3e      	ldr	r3, [pc, #248]	; (8005b24 <xPortStartScheduler+0x120>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3f      	ldr	r2, [pc, #252]	; (8005b2c <xPortStartScheduler+0x128>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10a      	bne.n	8005a4a <xPortStartScheduler+0x46>
        __asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60fb      	str	r3, [r7, #12]
    }
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a4a:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <xPortStartScheduler+0x12c>)
 8005a4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <xPortStartScheduler+0x130>)
 8005a70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a72:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <xPortStartScheduler+0x134>)
 8005a74:	2207      	movs	r2, #7
 8005a76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a78:	e009      	b.n	8005a8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005a7a:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <xPortStartScheduler+0x134>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	4a2d      	ldr	r2, [pc, #180]	; (8005b38 <xPortStartScheduler+0x134>)
 8005a82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b80      	cmp	r3, #128	; 0x80
 8005a98:	d0ef      	beq.n	8005a7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a9a:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <xPortStartScheduler+0x134>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1c3 0307 	rsb	r3, r3, #7
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d00a      	beq.n	8005abc <xPortStartScheduler+0xb8>
        __asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60bb      	str	r3, [r7, #8]
    }
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <xPortStartScheduler+0x134>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <xPortStartScheduler+0x134>)
 8005ac4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ac6:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <xPortStartScheduler+0x134>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ace:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <xPortStartScheduler+0x134>)
 8005ad0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005ada:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <xPortStartScheduler+0x138>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <xPortStartScheduler+0x138>)
 8005ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ae4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <xPortStartScheduler+0x138>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <xPortStartScheduler+0x138>)
 8005aec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005af0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005af2:	f000 f8db 	bl	8005cac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005af6:	4b12      	ldr	r3, [pc, #72]	; (8005b40 <xPortStartScheduler+0x13c>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005afc:	f000 f8fa 	bl	8005cf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b00:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <xPortStartScheduler+0x140>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <xPortStartScheduler+0x140>)
 8005b06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005b0c:	f7ff ff64 	bl	80059d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005b10:	f7fe ff7a 	bl	8004a08 <vTaskSwitchContext>
    prvTaskExitError();
 8005b14:	f7ff ff1c 	bl	8005950 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	e000ed00 	.word	0xe000ed00
 8005b28:	410fc271 	.word	0x410fc271
 8005b2c:	410fc270 	.word	0x410fc270
 8005b30:	e000e400 	.word	0xe000e400
 8005b34:	200002cc 	.word	0x200002cc
 8005b38:	200002d0 	.word	0x200002d0
 8005b3c:	e000ed20 	.word	0xe000ed20
 8005b40:	20000024 	.word	0x20000024
 8005b44:	e000ef34 	.word	0xe000ef34

08005b48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
    }
 8005b60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <vPortEnterCritical+0x58>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <vPortEnterCritical+0x58>)
 8005b6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <vPortEnterCritical+0x58>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d10f      	bne.n	8005b94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <vPortEnterCritical+0x5c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <vPortEnterCritical+0x4c>
        __asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	603b      	str	r3, [r7, #0]
    }
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vPortEnterCritical+0x4a>
    }
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	20000024 	.word	0x20000024
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <vPortExitCritical+0x50>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <vPortExitCritical+0x24>
        __asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	607b      	str	r3, [r7, #4]
    }
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <vPortExitCritical+0x50>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <vPortExitCritical+0x50>)
 8005bd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <vPortExitCritical+0x50>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <vPortExitCritical+0x42>
 8005bde:	2300      	movs	r3, #0
 8005be0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f383 8811 	msr	BASEPRI, r3
    }
 8005be8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000024 	.word	0x20000024
 8005bfc:	00000000 	.word	0x00000000

08005c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005c00:	f3ef 8009 	mrs	r0, PSP
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <pxCurrentTCBConst>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	f01e 0f10 	tst.w	lr, #16
 8005c10:	bf08      	it	eq
 8005c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	6010      	str	r0, [r2, #0]
 8005c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c24:	f380 8811 	msr	BASEPRI, r0
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f7fe feea 	bl	8004a08 <vTaskSwitchContext>
 8005c34:	f04f 0000 	mov.w	r0, #0
 8005c38:	f380 8811 	msr	BASEPRI, r0
 8005c3c:	bc09      	pop	{r0, r3}
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	6808      	ldr	r0, [r1, #0]
 8005c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c46:	f01e 0f10 	tst.w	lr, #16
 8005c4a:	bf08      	it	eq
 8005c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c50:	f380 8809 	msr	PSP, r0
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	f3af 8000 	nop.w

08005c60 <pxCurrentTCBConst>:
 8005c60:	2000018c 	.word	0x2000018c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop

08005c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	607b      	str	r3, [r7, #4]
    }
 8005c80:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005c82:	f7fe fe09 	bl	8004898 <xTaskIncrementTick>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <SysTick_Handler+0x40>)
 8005c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	2300      	movs	r3, #0
 8005c96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	f383 8811 	msr	BASEPRI, r3
    }
 8005c9e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <vPortSetupTimerInterrupt+0x34>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <vPortSetupTimerInterrupt+0x38>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <vPortSetupTimerInterrupt+0x3c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <vPortSetupTimerInterrupt+0x40>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	099b      	lsrs	r3, r3, #6
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <vPortSetupTimerInterrupt+0x44>)
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <vPortSetupTimerInterrupt+0x34>)
 8005cd0:	2207      	movs	r2, #7
 8005cd2:	601a      	str	r2, [r3, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	e000e010 	.word	0xe000e010
 8005ce4:	e000e018 	.word	0xe000e018
 8005ce8:	20000014 	.word	0x20000014
 8005cec:	10624dd3 	.word	0x10624dd3
 8005cf0:	e000e014 	.word	0xe000e014

08005cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d04 <vPortEnableVFP+0x10>
 8005cf8:	6801      	ldr	r1, [r0, #0]
 8005cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cfe:	6001      	str	r1, [r0, #0]
 8005d00:	4770      	bx	lr
 8005d02:	0000      	.short	0x0000
 8005d04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop

08005d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005d12:	f3ef 8305 	mrs	r3, IPSR
 8005d16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b0f      	cmp	r3, #15
 8005d1c:	d914      	bls.n	8005d48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d1e:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <vPortValidateInterruptPriority+0x70>)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <vPortValidateInterruptPriority+0x74>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	7afa      	ldrb	r2, [r7, #11]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d20a      	bcs.n	8005d48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	607b      	str	r3, [r7, #4]
    }
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d48:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <vPortValidateInterruptPriority+0x78>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <vPortValidateInterruptPriority+0x7c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d90a      	bls.n	8005d6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	603b      	str	r3, [r7, #0]
    }
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <vPortValidateInterruptPriority+0x60>
    }
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	e000e3f0 	.word	0xe000e3f0
 8005d80:	200002cc 	.word	0x200002cc
 8005d84:	e000ed0c 	.word	0xe000ed0c
 8005d88:	200002d0 	.word	0x200002d0

08005d8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005d98:	f7fe fcc4 	bl	8004724 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005d9c:	4b65      	ldr	r3, [pc, #404]	; (8005f34 <pvPortMalloc+0x1a8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005da4:	f000 f934 	bl	8006010 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005da8:	4b63      	ldr	r3, [pc, #396]	; (8005f38 <pvPortMalloc+0x1ac>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f040 80a7 	bne.w	8005f04 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d02d      	beq.n	8005e18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d227      	bcs.n	8005e18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005dc8:	2208      	movs	r2, #8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d021      	beq.n	8005e1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f023 0307 	bic.w	r3, r3, #7
 8005de0:	3308      	adds	r3, #8
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d214      	bcs.n	8005e12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	3308      	adds	r3, #8
 8005df0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <pvPortMalloc+0x92>
        __asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	617b      	str	r3, [r7, #20]
    }
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e16:	e002      	b.n	8005e1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	e000      	b.n	8005e20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d06e      	beq.n	8005f04 <pvPortMalloc+0x178>
 8005e26:	4b45      	ldr	r3, [pc, #276]	; (8005f3c <pvPortMalloc+0x1b0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d869      	bhi.n	8005f04 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005e30:	4b43      	ldr	r3, [pc, #268]	; (8005f40 <pvPortMalloc+0x1b4>)
 8005e32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005e34:	4b42      	ldr	r3, [pc, #264]	; (8005f40 <pvPortMalloc+0x1b4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e3a:	e004      	b.n	8005e46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d903      	bls.n	8005e58 <pvPortMalloc+0xcc>
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f1      	bne.n	8005e3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005e58:	4b36      	ldr	r3, [pc, #216]	; (8005f34 <pvPortMalloc+0x1a8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d050      	beq.n	8005f04 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2208      	movs	r2, #8
 8005e68:	4413      	add	r3, r2
 8005e6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d91f      	bls.n	8005ec4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <pvPortMalloc+0x120>
        __asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	613b      	str	r3, [r7, #16]
    }
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	1ad2      	subs	r2, r2, r3
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ebe:	69b8      	ldr	r0, [r7, #24]
 8005ec0:	f000 f908 	bl	80060d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <pvPortMalloc+0x1b0>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <pvPortMalloc+0x1b0>)
 8005ed0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <pvPortMalloc+0x1b0>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <pvPortMalloc+0x1b8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d203      	bcs.n	8005ee6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ede:	4b17      	ldr	r3, [pc, #92]	; (8005f3c <pvPortMalloc+0x1b0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <pvPortMalloc+0x1b8>)
 8005ee4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <pvPortMalloc+0x1ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005efa:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <pvPortMalloc+0x1bc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3301      	adds	r3, #1
 8005f00:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <pvPortMalloc+0x1bc>)
 8005f02:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005f04:	f7fe fc1c 	bl	8004740 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <pvPortMalloc+0x19c>
        __asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60fb      	str	r3, [r7, #12]
    }
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <pvPortMalloc+0x19a>
    return pvReturn;
 8005f28:	69fb      	ldr	r3, [r7, #28]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3728      	adds	r7, #40	; 0x28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20012edc 	.word	0x20012edc
 8005f38:	20012ef0 	.word	0x20012ef0
 8005f3c:	20012ee0 	.word	0x20012ee0
 8005f40:	20012ed4 	.word	0x20012ed4
 8005f44:	20012ee4 	.word	0x20012ee4
 8005f48:	20012ee8 	.word	0x20012ee8

08005f4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d04d      	beq.n	8005ffa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005f5e:	2308      	movs	r3, #8
 8005f60:	425b      	negs	r3, r3
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4413      	add	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	4b24      	ldr	r3, [pc, #144]	; (8006004 <vPortFree+0xb8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <vPortFree+0x44>
        __asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	60fb      	str	r3, [r7, #12]
    }
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <vPortFree+0x62>
        __asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	60bb      	str	r3, [r7, #8]
    }
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	4b14      	ldr	r3, [pc, #80]	; (8006004 <vPortFree+0xb8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01e      	beq.n	8005ffa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11a      	bne.n	8005ffa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	; (8006004 <vPortFree+0xb8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	401a      	ands	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005fd4:	f7fe fba6 	bl	8004724 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <vPortFree+0xbc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <vPortFree+0xbc>)
 8005fe4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fe6:	6938      	ldr	r0, [r7, #16]
 8005fe8:	f000 f874 	bl	80060d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005fec:	4b07      	ldr	r3, [pc, #28]	; (800600c <vPortFree+0xc0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	4a06      	ldr	r2, [pc, #24]	; (800600c <vPortFree+0xc0>)
 8005ff4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005ff6:	f7fe fba3 	bl	8004740 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005ffa:	bf00      	nop
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20012ef0 	.word	0x20012ef0
 8006008:	20012ee0 	.word	0x20012ee0
 800600c:	20012eec 	.word	0x20012eec

08006010 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006016:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800601a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800601c:	4b27      	ldr	r3, [pc, #156]	; (80060bc <prvHeapInit+0xac>)
 800601e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3307      	adds	r3, #7
 800602e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0307 	bic.w	r3, r3, #7
 8006036:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <prvHeapInit+0xac>)
 8006040:	4413      	add	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006048:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <prvHeapInit+0xb0>)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800604e:	4b1c      	ldr	r3, [pc, #112]	; (80060c0 <prvHeapInit+0xb0>)
 8006050:	2200      	movs	r2, #0
 8006052:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4413      	add	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800605c:	2208      	movs	r2, #8
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <prvHeapInit+0xb4>)
 8006070:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006072:	4b14      	ldr	r3, [pc, #80]	; (80060c4 <prvHeapInit+0xb4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <prvHeapInit+0xb4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	1ad2      	subs	r2, r2, r3
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <prvHeapInit+0xb4>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <prvHeapInit+0xb8>)
 800609e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a09      	ldr	r2, [pc, #36]	; (80060cc <prvHeapInit+0xbc>)
 80060a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060a8:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <prvHeapInit+0xc0>)
 80060aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060ae:	601a      	str	r2, [r3, #0]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	200002d4 	.word	0x200002d4
 80060c0:	20012ed4 	.word	0x20012ed4
 80060c4:	20012edc 	.word	0x20012edc
 80060c8:	20012ee4 	.word	0x20012ee4
 80060cc:	20012ee0 	.word	0x20012ee0
 80060d0:	20012ef0 	.word	0x20012ef0

080060d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060dc:	4b28      	ldr	r3, [pc, #160]	; (8006180 <prvInsertBlockIntoFreeList+0xac>)
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	e002      	b.n	80060e8 <prvInsertBlockIntoFreeList+0x14>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d8f7      	bhi.n	80060e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4413      	add	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d108      	bne.n	8006116 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	441a      	add	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	441a      	add	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d118      	bne.n	800615c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <prvInsertBlockIntoFreeList+0xb0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d00d      	beq.n	8006152 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	441a      	add	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e008      	b.n	8006164 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006152:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <prvInsertBlockIntoFreeList+0xb0>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e003      	b.n	8006164 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d002      	beq.n	8006172 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20012ed4 	.word	0x20012ed4
 8006184:	20012edc 	.word	0x20012edc

08006188 <__errno>:
 8006188:	4b01      	ldr	r3, [pc, #4]	; (8006190 <__errno+0x8>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000028 	.word	0x20000028

08006194 <__libc_init_array>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4d0d      	ldr	r5, [pc, #52]	; (80061cc <__libc_init_array+0x38>)
 8006198:	4c0d      	ldr	r4, [pc, #52]	; (80061d0 <__libc_init_array+0x3c>)
 800619a:	1b64      	subs	r4, r4, r5
 800619c:	10a4      	asrs	r4, r4, #2
 800619e:	2600      	movs	r6, #0
 80061a0:	42a6      	cmp	r6, r4
 80061a2:	d109      	bne.n	80061b8 <__libc_init_array+0x24>
 80061a4:	4d0b      	ldr	r5, [pc, #44]	; (80061d4 <__libc_init_array+0x40>)
 80061a6:	4c0c      	ldr	r4, [pc, #48]	; (80061d8 <__libc_init_array+0x44>)
 80061a8:	f001 fa34 	bl	8007614 <_init>
 80061ac:	1b64      	subs	r4, r4, r5
 80061ae:	10a4      	asrs	r4, r4, #2
 80061b0:	2600      	movs	r6, #0
 80061b2:	42a6      	cmp	r6, r4
 80061b4:	d105      	bne.n	80061c2 <__libc_init_array+0x2e>
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061bc:	4798      	blx	r3
 80061be:	3601      	adds	r6, #1
 80061c0:	e7ee      	b.n	80061a0 <__libc_init_array+0xc>
 80061c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c6:	4798      	blx	r3
 80061c8:	3601      	adds	r6, #1
 80061ca:	e7f2      	b.n	80061b2 <__libc_init_array+0x1e>
 80061cc:	080078ac 	.word	0x080078ac
 80061d0:	080078ac 	.word	0x080078ac
 80061d4:	080078ac 	.word	0x080078ac
 80061d8:	080078b0 	.word	0x080078b0

080061dc <memcpy>:
 80061dc:	440a      	add	r2, r1
 80061de:	4291      	cmp	r1, r2
 80061e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061e4:	d100      	bne.n	80061e8 <memcpy+0xc>
 80061e6:	4770      	bx	lr
 80061e8:	b510      	push	{r4, lr}
 80061ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061f2:	4291      	cmp	r1, r2
 80061f4:	d1f9      	bne.n	80061ea <memcpy+0xe>
 80061f6:	bd10      	pop	{r4, pc}

080061f8 <memset>:
 80061f8:	4402      	add	r2, r0
 80061fa:	4603      	mov	r3, r0
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d100      	bne.n	8006202 <memset+0xa>
 8006200:	4770      	bx	lr
 8006202:	f803 1b01 	strb.w	r1, [r3], #1
 8006206:	e7f9      	b.n	80061fc <memset+0x4>

08006208 <rand>:
 8006208:	4b16      	ldr	r3, [pc, #88]	; (8006264 <rand+0x5c>)
 800620a:	b510      	push	{r4, lr}
 800620c:	681c      	ldr	r4, [r3, #0]
 800620e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006210:	b9b3      	cbnz	r3, 8006240 <rand+0x38>
 8006212:	2018      	movs	r0, #24
 8006214:	f000 f886 	bl	8006324 <malloc>
 8006218:	63a0      	str	r0, [r4, #56]	; 0x38
 800621a:	b928      	cbnz	r0, 8006228 <rand+0x20>
 800621c:	4602      	mov	r2, r0
 800621e:	4b12      	ldr	r3, [pc, #72]	; (8006268 <rand+0x60>)
 8006220:	4812      	ldr	r0, [pc, #72]	; (800626c <rand+0x64>)
 8006222:	214e      	movs	r1, #78	; 0x4e
 8006224:	f000 f84e 	bl	80062c4 <__assert_func>
 8006228:	4a11      	ldr	r2, [pc, #68]	; (8006270 <rand+0x68>)
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <rand+0x6c>)
 800622c:	e9c0 2300 	strd	r2, r3, [r0]
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <rand+0x70>)
 8006232:	6083      	str	r3, [r0, #8]
 8006234:	230b      	movs	r3, #11
 8006236:	8183      	strh	r3, [r0, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	2300      	movs	r3, #0
 800623c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006240:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006242:	4a0e      	ldr	r2, [pc, #56]	; (800627c <rand+0x74>)
 8006244:	6920      	ldr	r0, [r4, #16]
 8006246:	6963      	ldr	r3, [r4, #20]
 8006248:	490d      	ldr	r1, [pc, #52]	; (8006280 <rand+0x78>)
 800624a:	4342      	muls	r2, r0
 800624c:	fb01 2203 	mla	r2, r1, r3, r2
 8006250:	fba0 0101 	umull	r0, r1, r0, r1
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	eb42 0001 	adc.w	r0, r2, r1
 800625a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800625e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006262:	bd10      	pop	{r4, pc}
 8006264:	20000028 	.word	0x20000028
 8006268:	08007760 	.word	0x08007760
 800626c:	08007777 	.word	0x08007777
 8006270:	abcd330e 	.word	0xabcd330e
 8006274:	e66d1234 	.word	0xe66d1234
 8006278:	0005deec 	.word	0x0005deec
 800627c:	5851f42d 	.word	0x5851f42d
 8006280:	4c957f2d 	.word	0x4c957f2d

08006284 <siprintf>:
 8006284:	b40e      	push	{r1, r2, r3}
 8006286:	b500      	push	{lr}
 8006288:	b09c      	sub	sp, #112	; 0x70
 800628a:	ab1d      	add	r3, sp, #116	; 0x74
 800628c:	9002      	str	r0, [sp, #8]
 800628e:	9006      	str	r0, [sp, #24]
 8006290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006294:	4809      	ldr	r0, [pc, #36]	; (80062bc <siprintf+0x38>)
 8006296:	9107      	str	r1, [sp, #28]
 8006298:	9104      	str	r1, [sp, #16]
 800629a:	4909      	ldr	r1, [pc, #36]	; (80062c0 <siprintf+0x3c>)
 800629c:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a0:	9105      	str	r1, [sp, #20]
 80062a2:	6800      	ldr	r0, [r0, #0]
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	a902      	add	r1, sp, #8
 80062a8:	f000 f980 	bl	80065ac <_svfiprintf_r>
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	b01c      	add	sp, #112	; 0x70
 80062b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b8:	b003      	add	sp, #12
 80062ba:	4770      	bx	lr
 80062bc:	20000028 	.word	0x20000028
 80062c0:	ffff0208 	.word	0xffff0208

080062c4 <__assert_func>:
 80062c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062c6:	4614      	mov	r4, r2
 80062c8:	461a      	mov	r2, r3
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <__assert_func+0x2c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4605      	mov	r5, r0
 80062d0:	68d8      	ldr	r0, [r3, #12]
 80062d2:	b14c      	cbz	r4, 80062e8 <__assert_func+0x24>
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <__assert_func+0x30>)
 80062d6:	9100      	str	r1, [sp, #0]
 80062d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062dc:	4906      	ldr	r1, [pc, #24]	; (80062f8 <__assert_func+0x34>)
 80062de:	462b      	mov	r3, r5
 80062e0:	f000 f80e 	bl	8006300 <fiprintf>
 80062e4:	f000 fe20 	bl	8006f28 <abort>
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <__assert_func+0x38>)
 80062ea:	461c      	mov	r4, r3
 80062ec:	e7f3      	b.n	80062d6 <__assert_func+0x12>
 80062ee:	bf00      	nop
 80062f0:	20000028 	.word	0x20000028
 80062f4:	080077d2 	.word	0x080077d2
 80062f8:	080077df 	.word	0x080077df
 80062fc:	0800780d 	.word	0x0800780d

08006300 <fiprintf>:
 8006300:	b40e      	push	{r1, r2, r3}
 8006302:	b503      	push	{r0, r1, lr}
 8006304:	4601      	mov	r1, r0
 8006306:	ab03      	add	r3, sp, #12
 8006308:	4805      	ldr	r0, [pc, #20]	; (8006320 <fiprintf+0x20>)
 800630a:	f853 2b04 	ldr.w	r2, [r3], #4
 800630e:	6800      	ldr	r0, [r0, #0]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	f000 fa75 	bl	8006800 <_vfiprintf_r>
 8006316:	b002      	add	sp, #8
 8006318:	f85d eb04 	ldr.w	lr, [sp], #4
 800631c:	b003      	add	sp, #12
 800631e:	4770      	bx	lr
 8006320:	20000028 	.word	0x20000028

08006324 <malloc>:
 8006324:	4b02      	ldr	r3, [pc, #8]	; (8006330 <malloc+0xc>)
 8006326:	4601      	mov	r1, r0
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	f000 b86f 	b.w	800640c <_malloc_r>
 800632e:	bf00      	nop
 8006330:	20000028 	.word	0x20000028

08006334 <_free_r>:
 8006334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006336:	2900      	cmp	r1, #0
 8006338:	d044      	beq.n	80063c4 <_free_r+0x90>
 800633a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800633e:	9001      	str	r0, [sp, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f1a1 0404 	sub.w	r4, r1, #4
 8006346:	bfb8      	it	lt
 8006348:	18e4      	addlt	r4, r4, r3
 800634a:	f001 f82f 	bl	80073ac <__malloc_lock>
 800634e:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <_free_r+0x94>)
 8006350:	9801      	ldr	r0, [sp, #4]
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	b933      	cbnz	r3, 8006364 <_free_r+0x30>
 8006356:	6063      	str	r3, [r4, #4]
 8006358:	6014      	str	r4, [r2, #0]
 800635a:	b003      	add	sp, #12
 800635c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006360:	f001 b82a 	b.w	80073b8 <__malloc_unlock>
 8006364:	42a3      	cmp	r3, r4
 8006366:	d908      	bls.n	800637a <_free_r+0x46>
 8006368:	6825      	ldr	r5, [r4, #0]
 800636a:	1961      	adds	r1, r4, r5
 800636c:	428b      	cmp	r3, r1
 800636e:	bf01      	itttt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	1949      	addeq	r1, r1, r5
 8006376:	6021      	streq	r1, [r4, #0]
 8006378:	e7ed      	b.n	8006356 <_free_r+0x22>
 800637a:	461a      	mov	r2, r3
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	b10b      	cbz	r3, 8006384 <_free_r+0x50>
 8006380:	42a3      	cmp	r3, r4
 8006382:	d9fa      	bls.n	800637a <_free_r+0x46>
 8006384:	6811      	ldr	r1, [r2, #0]
 8006386:	1855      	adds	r5, r2, r1
 8006388:	42a5      	cmp	r5, r4
 800638a:	d10b      	bne.n	80063a4 <_free_r+0x70>
 800638c:	6824      	ldr	r4, [r4, #0]
 800638e:	4421      	add	r1, r4
 8006390:	1854      	adds	r4, r2, r1
 8006392:	42a3      	cmp	r3, r4
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	d1e0      	bne.n	800635a <_free_r+0x26>
 8006398:	681c      	ldr	r4, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	6053      	str	r3, [r2, #4]
 800639e:	4421      	add	r1, r4
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	e7da      	b.n	800635a <_free_r+0x26>
 80063a4:	d902      	bls.n	80063ac <_free_r+0x78>
 80063a6:	230c      	movs	r3, #12
 80063a8:	6003      	str	r3, [r0, #0]
 80063aa:	e7d6      	b.n	800635a <_free_r+0x26>
 80063ac:	6825      	ldr	r5, [r4, #0]
 80063ae:	1961      	adds	r1, r4, r5
 80063b0:	428b      	cmp	r3, r1
 80063b2:	bf04      	itt	eq
 80063b4:	6819      	ldreq	r1, [r3, #0]
 80063b6:	685b      	ldreq	r3, [r3, #4]
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	bf04      	itt	eq
 80063bc:	1949      	addeq	r1, r1, r5
 80063be:	6021      	streq	r1, [r4, #0]
 80063c0:	6054      	str	r4, [r2, #4]
 80063c2:	e7ca      	b.n	800635a <_free_r+0x26>
 80063c4:	b003      	add	sp, #12
 80063c6:	bd30      	pop	{r4, r5, pc}
 80063c8:	20012ef4 	.word	0x20012ef4

080063cc <sbrk_aligned>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4e0e      	ldr	r6, [pc, #56]	; (8006408 <sbrk_aligned+0x3c>)
 80063d0:	460c      	mov	r4, r1
 80063d2:	6831      	ldr	r1, [r6, #0]
 80063d4:	4605      	mov	r5, r0
 80063d6:	b911      	cbnz	r1, 80063de <sbrk_aligned+0x12>
 80063d8:	f000 fcd6 	bl	8006d88 <_sbrk_r>
 80063dc:	6030      	str	r0, [r6, #0]
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 fcd1 	bl	8006d88 <_sbrk_r>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	d00a      	beq.n	8006400 <sbrk_aligned+0x34>
 80063ea:	1cc4      	adds	r4, r0, #3
 80063ec:	f024 0403 	bic.w	r4, r4, #3
 80063f0:	42a0      	cmp	r0, r4
 80063f2:	d007      	beq.n	8006404 <sbrk_aligned+0x38>
 80063f4:	1a21      	subs	r1, r4, r0
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 fcc6 	bl	8006d88 <_sbrk_r>
 80063fc:	3001      	adds	r0, #1
 80063fe:	d101      	bne.n	8006404 <sbrk_aligned+0x38>
 8006400:	f04f 34ff 	mov.w	r4, #4294967295
 8006404:	4620      	mov	r0, r4
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	20012ef8 	.word	0x20012ef8

0800640c <_malloc_r>:
 800640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	1ccd      	adds	r5, r1, #3
 8006412:	f025 0503 	bic.w	r5, r5, #3
 8006416:	3508      	adds	r5, #8
 8006418:	2d0c      	cmp	r5, #12
 800641a:	bf38      	it	cc
 800641c:	250c      	movcc	r5, #12
 800641e:	2d00      	cmp	r5, #0
 8006420:	4607      	mov	r7, r0
 8006422:	db01      	blt.n	8006428 <_malloc_r+0x1c>
 8006424:	42a9      	cmp	r1, r5
 8006426:	d905      	bls.n	8006434 <_malloc_r+0x28>
 8006428:	230c      	movs	r3, #12
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	2600      	movs	r6, #0
 800642e:	4630      	mov	r0, r6
 8006430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006434:	4e2e      	ldr	r6, [pc, #184]	; (80064f0 <_malloc_r+0xe4>)
 8006436:	f000 ffb9 	bl	80073ac <__malloc_lock>
 800643a:	6833      	ldr	r3, [r6, #0]
 800643c:	461c      	mov	r4, r3
 800643e:	bb34      	cbnz	r4, 800648e <_malloc_r+0x82>
 8006440:	4629      	mov	r1, r5
 8006442:	4638      	mov	r0, r7
 8006444:	f7ff ffc2 	bl	80063cc <sbrk_aligned>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	4604      	mov	r4, r0
 800644c:	d14d      	bne.n	80064ea <_malloc_r+0xde>
 800644e:	6834      	ldr	r4, [r6, #0]
 8006450:	4626      	mov	r6, r4
 8006452:	2e00      	cmp	r6, #0
 8006454:	d140      	bne.n	80064d8 <_malloc_r+0xcc>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	4631      	mov	r1, r6
 800645a:	4638      	mov	r0, r7
 800645c:	eb04 0803 	add.w	r8, r4, r3
 8006460:	f000 fc92 	bl	8006d88 <_sbrk_r>
 8006464:	4580      	cmp	r8, r0
 8006466:	d13a      	bne.n	80064de <_malloc_r+0xd2>
 8006468:	6821      	ldr	r1, [r4, #0]
 800646a:	3503      	adds	r5, #3
 800646c:	1a6d      	subs	r5, r5, r1
 800646e:	f025 0503 	bic.w	r5, r5, #3
 8006472:	3508      	adds	r5, #8
 8006474:	2d0c      	cmp	r5, #12
 8006476:	bf38      	it	cc
 8006478:	250c      	movcc	r5, #12
 800647a:	4629      	mov	r1, r5
 800647c:	4638      	mov	r0, r7
 800647e:	f7ff ffa5 	bl	80063cc <sbrk_aligned>
 8006482:	3001      	adds	r0, #1
 8006484:	d02b      	beq.n	80064de <_malloc_r+0xd2>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	442b      	add	r3, r5
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	e00e      	b.n	80064ac <_malloc_r+0xa0>
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	1b52      	subs	r2, r2, r5
 8006492:	d41e      	bmi.n	80064d2 <_malloc_r+0xc6>
 8006494:	2a0b      	cmp	r2, #11
 8006496:	d916      	bls.n	80064c6 <_malloc_r+0xba>
 8006498:	1961      	adds	r1, r4, r5
 800649a:	42a3      	cmp	r3, r4
 800649c:	6025      	str	r5, [r4, #0]
 800649e:	bf18      	it	ne
 80064a0:	6059      	strne	r1, [r3, #4]
 80064a2:	6863      	ldr	r3, [r4, #4]
 80064a4:	bf08      	it	eq
 80064a6:	6031      	streq	r1, [r6, #0]
 80064a8:	5162      	str	r2, [r4, r5]
 80064aa:	604b      	str	r3, [r1, #4]
 80064ac:	4638      	mov	r0, r7
 80064ae:	f104 060b 	add.w	r6, r4, #11
 80064b2:	f000 ff81 	bl	80073b8 <__malloc_unlock>
 80064b6:	f026 0607 	bic.w	r6, r6, #7
 80064ba:	1d23      	adds	r3, r4, #4
 80064bc:	1af2      	subs	r2, r6, r3
 80064be:	d0b6      	beq.n	800642e <_malloc_r+0x22>
 80064c0:	1b9b      	subs	r3, r3, r6
 80064c2:	50a3      	str	r3, [r4, r2]
 80064c4:	e7b3      	b.n	800642e <_malloc_r+0x22>
 80064c6:	6862      	ldr	r2, [r4, #4]
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	bf0c      	ite	eq
 80064cc:	6032      	streq	r2, [r6, #0]
 80064ce:	605a      	strne	r2, [r3, #4]
 80064d0:	e7ec      	b.n	80064ac <_malloc_r+0xa0>
 80064d2:	4623      	mov	r3, r4
 80064d4:	6864      	ldr	r4, [r4, #4]
 80064d6:	e7b2      	b.n	800643e <_malloc_r+0x32>
 80064d8:	4634      	mov	r4, r6
 80064da:	6876      	ldr	r6, [r6, #4]
 80064dc:	e7b9      	b.n	8006452 <_malloc_r+0x46>
 80064de:	230c      	movs	r3, #12
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	4638      	mov	r0, r7
 80064e4:	f000 ff68 	bl	80073b8 <__malloc_unlock>
 80064e8:	e7a1      	b.n	800642e <_malloc_r+0x22>
 80064ea:	6025      	str	r5, [r4, #0]
 80064ec:	e7de      	b.n	80064ac <_malloc_r+0xa0>
 80064ee:	bf00      	nop
 80064f0:	20012ef4 	.word	0x20012ef4

080064f4 <__ssputs_r>:
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	688e      	ldr	r6, [r1, #8]
 80064fa:	429e      	cmp	r6, r3
 80064fc:	4682      	mov	sl, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	4690      	mov	r8, r2
 8006502:	461f      	mov	r7, r3
 8006504:	d838      	bhi.n	8006578 <__ssputs_r+0x84>
 8006506:	898a      	ldrh	r2, [r1, #12]
 8006508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800650c:	d032      	beq.n	8006574 <__ssputs_r+0x80>
 800650e:	6825      	ldr	r5, [r4, #0]
 8006510:	6909      	ldr	r1, [r1, #16]
 8006512:	eba5 0901 	sub.w	r9, r5, r1
 8006516:	6965      	ldr	r5, [r4, #20]
 8006518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800651c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006520:	3301      	adds	r3, #1
 8006522:	444b      	add	r3, r9
 8006524:	106d      	asrs	r5, r5, #1
 8006526:	429d      	cmp	r5, r3
 8006528:	bf38      	it	cc
 800652a:	461d      	movcc	r5, r3
 800652c:	0553      	lsls	r3, r2, #21
 800652e:	d531      	bpl.n	8006594 <__ssputs_r+0xa0>
 8006530:	4629      	mov	r1, r5
 8006532:	f7ff ff6b 	bl	800640c <_malloc_r>
 8006536:	4606      	mov	r6, r0
 8006538:	b950      	cbnz	r0, 8006550 <__ssputs_r+0x5c>
 800653a:	230c      	movs	r3, #12
 800653c:	f8ca 3000 	str.w	r3, [sl]
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006550:	6921      	ldr	r1, [r4, #16]
 8006552:	464a      	mov	r2, r9
 8006554:	f7ff fe42 	bl	80061dc <memcpy>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800655e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006562:	81a3      	strh	r3, [r4, #12]
 8006564:	6126      	str	r6, [r4, #16]
 8006566:	6165      	str	r5, [r4, #20]
 8006568:	444e      	add	r6, r9
 800656a:	eba5 0509 	sub.w	r5, r5, r9
 800656e:	6026      	str	r6, [r4, #0]
 8006570:	60a5      	str	r5, [r4, #8]
 8006572:	463e      	mov	r6, r7
 8006574:	42be      	cmp	r6, r7
 8006576:	d900      	bls.n	800657a <__ssputs_r+0x86>
 8006578:	463e      	mov	r6, r7
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	4632      	mov	r2, r6
 800657e:	4641      	mov	r1, r8
 8006580:	f000 fefa 	bl	8007378 <memmove>
 8006584:	68a3      	ldr	r3, [r4, #8]
 8006586:	1b9b      	subs	r3, r3, r6
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	4433      	add	r3, r6
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	2000      	movs	r0, #0
 8006592:	e7db      	b.n	800654c <__ssputs_r+0x58>
 8006594:	462a      	mov	r2, r5
 8006596:	f000 ff15 	bl	80073c4 <_realloc_r>
 800659a:	4606      	mov	r6, r0
 800659c:	2800      	cmp	r0, #0
 800659e:	d1e1      	bne.n	8006564 <__ssputs_r+0x70>
 80065a0:	6921      	ldr	r1, [r4, #16]
 80065a2:	4650      	mov	r0, sl
 80065a4:	f7ff fec6 	bl	8006334 <_free_r>
 80065a8:	e7c7      	b.n	800653a <__ssputs_r+0x46>
	...

080065ac <_svfiprintf_r>:
 80065ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b0:	4698      	mov	r8, r3
 80065b2:	898b      	ldrh	r3, [r1, #12]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	b09d      	sub	sp, #116	; 0x74
 80065b8:	4607      	mov	r7, r0
 80065ba:	460d      	mov	r5, r1
 80065bc:	4614      	mov	r4, r2
 80065be:	d50e      	bpl.n	80065de <_svfiprintf_r+0x32>
 80065c0:	690b      	ldr	r3, [r1, #16]
 80065c2:	b963      	cbnz	r3, 80065de <_svfiprintf_r+0x32>
 80065c4:	2140      	movs	r1, #64	; 0x40
 80065c6:	f7ff ff21 	bl	800640c <_malloc_r>
 80065ca:	6028      	str	r0, [r5, #0]
 80065cc:	6128      	str	r0, [r5, #16]
 80065ce:	b920      	cbnz	r0, 80065da <_svfiprintf_r+0x2e>
 80065d0:	230c      	movs	r3, #12
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	e0d1      	b.n	800677e <_svfiprintf_r+0x1d2>
 80065da:	2340      	movs	r3, #64	; 0x40
 80065dc:	616b      	str	r3, [r5, #20]
 80065de:	2300      	movs	r3, #0
 80065e0:	9309      	str	r3, [sp, #36]	; 0x24
 80065e2:	2320      	movs	r3, #32
 80065e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065ec:	2330      	movs	r3, #48	; 0x30
 80065ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006798 <_svfiprintf_r+0x1ec>
 80065f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065f6:	f04f 0901 	mov.w	r9, #1
 80065fa:	4623      	mov	r3, r4
 80065fc:	469a      	mov	sl, r3
 80065fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006602:	b10a      	cbz	r2, 8006608 <_svfiprintf_r+0x5c>
 8006604:	2a25      	cmp	r2, #37	; 0x25
 8006606:	d1f9      	bne.n	80065fc <_svfiprintf_r+0x50>
 8006608:	ebba 0b04 	subs.w	fp, sl, r4
 800660c:	d00b      	beq.n	8006626 <_svfiprintf_r+0x7a>
 800660e:	465b      	mov	r3, fp
 8006610:	4622      	mov	r2, r4
 8006612:	4629      	mov	r1, r5
 8006614:	4638      	mov	r0, r7
 8006616:	f7ff ff6d 	bl	80064f4 <__ssputs_r>
 800661a:	3001      	adds	r0, #1
 800661c:	f000 80aa 	beq.w	8006774 <_svfiprintf_r+0x1c8>
 8006620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006622:	445a      	add	r2, fp
 8006624:	9209      	str	r2, [sp, #36]	; 0x24
 8006626:	f89a 3000 	ldrb.w	r3, [sl]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 80a2 	beq.w	8006774 <_svfiprintf_r+0x1c8>
 8006630:	2300      	movs	r3, #0
 8006632:	f04f 32ff 	mov.w	r2, #4294967295
 8006636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800663a:	f10a 0a01 	add.w	sl, sl, #1
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	9307      	str	r3, [sp, #28]
 8006642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006646:	931a      	str	r3, [sp, #104]	; 0x68
 8006648:	4654      	mov	r4, sl
 800664a:	2205      	movs	r2, #5
 800664c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006650:	4851      	ldr	r0, [pc, #324]	; (8006798 <_svfiprintf_r+0x1ec>)
 8006652:	f7f9 fdc5 	bl	80001e0 <memchr>
 8006656:	9a04      	ldr	r2, [sp, #16]
 8006658:	b9d8      	cbnz	r0, 8006692 <_svfiprintf_r+0xe6>
 800665a:	06d0      	lsls	r0, r2, #27
 800665c:	bf44      	itt	mi
 800665e:	2320      	movmi	r3, #32
 8006660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006664:	0711      	lsls	r1, r2, #28
 8006666:	bf44      	itt	mi
 8006668:	232b      	movmi	r3, #43	; 0x2b
 800666a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800666e:	f89a 3000 	ldrb.w	r3, [sl]
 8006672:	2b2a      	cmp	r3, #42	; 0x2a
 8006674:	d015      	beq.n	80066a2 <_svfiprintf_r+0xf6>
 8006676:	9a07      	ldr	r2, [sp, #28]
 8006678:	4654      	mov	r4, sl
 800667a:	2000      	movs	r0, #0
 800667c:	f04f 0c0a 	mov.w	ip, #10
 8006680:	4621      	mov	r1, r4
 8006682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006686:	3b30      	subs	r3, #48	; 0x30
 8006688:	2b09      	cmp	r3, #9
 800668a:	d94e      	bls.n	800672a <_svfiprintf_r+0x17e>
 800668c:	b1b0      	cbz	r0, 80066bc <_svfiprintf_r+0x110>
 800668e:	9207      	str	r2, [sp, #28]
 8006690:	e014      	b.n	80066bc <_svfiprintf_r+0x110>
 8006692:	eba0 0308 	sub.w	r3, r0, r8
 8006696:	fa09 f303 	lsl.w	r3, r9, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	46a2      	mov	sl, r4
 80066a0:	e7d2      	b.n	8006648 <_svfiprintf_r+0x9c>
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	1d19      	adds	r1, r3, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	9103      	str	r1, [sp, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bfbb      	ittet	lt
 80066ae:	425b      	neglt	r3, r3
 80066b0:	f042 0202 	orrlt.w	r2, r2, #2
 80066b4:	9307      	strge	r3, [sp, #28]
 80066b6:	9307      	strlt	r3, [sp, #28]
 80066b8:	bfb8      	it	lt
 80066ba:	9204      	strlt	r2, [sp, #16]
 80066bc:	7823      	ldrb	r3, [r4, #0]
 80066be:	2b2e      	cmp	r3, #46	; 0x2e
 80066c0:	d10c      	bne.n	80066dc <_svfiprintf_r+0x130>
 80066c2:	7863      	ldrb	r3, [r4, #1]
 80066c4:	2b2a      	cmp	r3, #42	; 0x2a
 80066c6:	d135      	bne.n	8006734 <_svfiprintf_r+0x188>
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	9203      	str	r2, [sp, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bfb8      	it	lt
 80066d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80066d8:	3402      	adds	r4, #2
 80066da:	9305      	str	r3, [sp, #20]
 80066dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067a8 <_svfiprintf_r+0x1fc>
 80066e0:	7821      	ldrb	r1, [r4, #0]
 80066e2:	2203      	movs	r2, #3
 80066e4:	4650      	mov	r0, sl
 80066e6:	f7f9 fd7b 	bl	80001e0 <memchr>
 80066ea:	b140      	cbz	r0, 80066fe <_svfiprintf_r+0x152>
 80066ec:	2340      	movs	r3, #64	; 0x40
 80066ee:	eba0 000a 	sub.w	r0, r0, sl
 80066f2:	fa03 f000 	lsl.w	r0, r3, r0
 80066f6:	9b04      	ldr	r3, [sp, #16]
 80066f8:	4303      	orrs	r3, r0
 80066fa:	3401      	adds	r4, #1
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006702:	4826      	ldr	r0, [pc, #152]	; (800679c <_svfiprintf_r+0x1f0>)
 8006704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006708:	2206      	movs	r2, #6
 800670a:	f7f9 fd69 	bl	80001e0 <memchr>
 800670e:	2800      	cmp	r0, #0
 8006710:	d038      	beq.n	8006784 <_svfiprintf_r+0x1d8>
 8006712:	4b23      	ldr	r3, [pc, #140]	; (80067a0 <_svfiprintf_r+0x1f4>)
 8006714:	bb1b      	cbnz	r3, 800675e <_svfiprintf_r+0x1b2>
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	3307      	adds	r3, #7
 800671a:	f023 0307 	bic.w	r3, r3, #7
 800671e:	3308      	adds	r3, #8
 8006720:	9303      	str	r3, [sp, #12]
 8006722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006724:	4433      	add	r3, r6
 8006726:	9309      	str	r3, [sp, #36]	; 0x24
 8006728:	e767      	b.n	80065fa <_svfiprintf_r+0x4e>
 800672a:	fb0c 3202 	mla	r2, ip, r2, r3
 800672e:	460c      	mov	r4, r1
 8006730:	2001      	movs	r0, #1
 8006732:	e7a5      	b.n	8006680 <_svfiprintf_r+0xd4>
 8006734:	2300      	movs	r3, #0
 8006736:	3401      	adds	r4, #1
 8006738:	9305      	str	r3, [sp, #20]
 800673a:	4619      	mov	r1, r3
 800673c:	f04f 0c0a 	mov.w	ip, #10
 8006740:	4620      	mov	r0, r4
 8006742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006746:	3a30      	subs	r2, #48	; 0x30
 8006748:	2a09      	cmp	r2, #9
 800674a:	d903      	bls.n	8006754 <_svfiprintf_r+0x1a8>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0c5      	beq.n	80066dc <_svfiprintf_r+0x130>
 8006750:	9105      	str	r1, [sp, #20]
 8006752:	e7c3      	b.n	80066dc <_svfiprintf_r+0x130>
 8006754:	fb0c 2101 	mla	r1, ip, r1, r2
 8006758:	4604      	mov	r4, r0
 800675a:	2301      	movs	r3, #1
 800675c:	e7f0      	b.n	8006740 <_svfiprintf_r+0x194>
 800675e:	ab03      	add	r3, sp, #12
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	462a      	mov	r2, r5
 8006764:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <_svfiprintf_r+0x1f8>)
 8006766:	a904      	add	r1, sp, #16
 8006768:	4638      	mov	r0, r7
 800676a:	f3af 8000 	nop.w
 800676e:	1c42      	adds	r2, r0, #1
 8006770:	4606      	mov	r6, r0
 8006772:	d1d6      	bne.n	8006722 <_svfiprintf_r+0x176>
 8006774:	89ab      	ldrh	r3, [r5, #12]
 8006776:	065b      	lsls	r3, r3, #25
 8006778:	f53f af2c 	bmi.w	80065d4 <_svfiprintf_r+0x28>
 800677c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800677e:	b01d      	add	sp, #116	; 0x74
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006784:	ab03      	add	r3, sp, #12
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	462a      	mov	r2, r5
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <_svfiprintf_r+0x1f8>)
 800678c:	a904      	add	r1, sp, #16
 800678e:	4638      	mov	r0, r7
 8006790:	f000 f9d4 	bl	8006b3c <_printf_i>
 8006794:	e7eb      	b.n	800676e <_svfiprintf_r+0x1c2>
 8006796:	bf00      	nop
 8006798:	0800780e 	.word	0x0800780e
 800679c:	08007818 	.word	0x08007818
 80067a0:	00000000 	.word	0x00000000
 80067a4:	080064f5 	.word	0x080064f5
 80067a8:	08007814 	.word	0x08007814

080067ac <__sfputc_r>:
 80067ac:	6893      	ldr	r3, [r2, #8]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	b410      	push	{r4}
 80067b4:	6093      	str	r3, [r2, #8]
 80067b6:	da08      	bge.n	80067ca <__sfputc_r+0x1e>
 80067b8:	6994      	ldr	r4, [r2, #24]
 80067ba:	42a3      	cmp	r3, r4
 80067bc:	db01      	blt.n	80067c2 <__sfputc_r+0x16>
 80067be:	290a      	cmp	r1, #10
 80067c0:	d103      	bne.n	80067ca <__sfputc_r+0x1e>
 80067c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067c6:	f000 baef 	b.w	8006da8 <__swbuf_r>
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	1c58      	adds	r0, r3, #1
 80067ce:	6010      	str	r0, [r2, #0]
 80067d0:	7019      	strb	r1, [r3, #0]
 80067d2:	4608      	mov	r0, r1
 80067d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067d8:	4770      	bx	lr

080067da <__sfputs_r>:
 80067da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067dc:	4606      	mov	r6, r0
 80067de:	460f      	mov	r7, r1
 80067e0:	4614      	mov	r4, r2
 80067e2:	18d5      	adds	r5, r2, r3
 80067e4:	42ac      	cmp	r4, r5
 80067e6:	d101      	bne.n	80067ec <__sfputs_r+0x12>
 80067e8:	2000      	movs	r0, #0
 80067ea:	e007      	b.n	80067fc <__sfputs_r+0x22>
 80067ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f0:	463a      	mov	r2, r7
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff ffda 	bl	80067ac <__sfputc_r>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d1f3      	bne.n	80067e4 <__sfputs_r+0xa>
 80067fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006800 <_vfiprintf_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	460d      	mov	r5, r1
 8006806:	b09d      	sub	sp, #116	; 0x74
 8006808:	4614      	mov	r4, r2
 800680a:	4698      	mov	r8, r3
 800680c:	4606      	mov	r6, r0
 800680e:	b118      	cbz	r0, 8006818 <_vfiprintf_r+0x18>
 8006810:	6983      	ldr	r3, [r0, #24]
 8006812:	b90b      	cbnz	r3, 8006818 <_vfiprintf_r+0x18>
 8006814:	f000 fcaa 	bl	800716c <__sinit>
 8006818:	4b89      	ldr	r3, [pc, #548]	; (8006a40 <_vfiprintf_r+0x240>)
 800681a:	429d      	cmp	r5, r3
 800681c:	d11b      	bne.n	8006856 <_vfiprintf_r+0x56>
 800681e:	6875      	ldr	r5, [r6, #4]
 8006820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006822:	07d9      	lsls	r1, r3, #31
 8006824:	d405      	bmi.n	8006832 <_vfiprintf_r+0x32>
 8006826:	89ab      	ldrh	r3, [r5, #12]
 8006828:	059a      	lsls	r2, r3, #22
 800682a:	d402      	bmi.n	8006832 <_vfiprintf_r+0x32>
 800682c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800682e:	f000 fd3b 	bl	80072a8 <__retarget_lock_acquire_recursive>
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	071b      	lsls	r3, r3, #28
 8006836:	d501      	bpl.n	800683c <_vfiprintf_r+0x3c>
 8006838:	692b      	ldr	r3, [r5, #16]
 800683a:	b9eb      	cbnz	r3, 8006878 <_vfiprintf_r+0x78>
 800683c:	4629      	mov	r1, r5
 800683e:	4630      	mov	r0, r6
 8006840:	f000 fb04 	bl	8006e4c <__swsetup_r>
 8006844:	b1c0      	cbz	r0, 8006878 <_vfiprintf_r+0x78>
 8006846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006848:	07dc      	lsls	r4, r3, #31
 800684a:	d50e      	bpl.n	800686a <_vfiprintf_r+0x6a>
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	b01d      	add	sp, #116	; 0x74
 8006852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006856:	4b7b      	ldr	r3, [pc, #492]	; (8006a44 <_vfiprintf_r+0x244>)
 8006858:	429d      	cmp	r5, r3
 800685a:	d101      	bne.n	8006860 <_vfiprintf_r+0x60>
 800685c:	68b5      	ldr	r5, [r6, #8]
 800685e:	e7df      	b.n	8006820 <_vfiprintf_r+0x20>
 8006860:	4b79      	ldr	r3, [pc, #484]	; (8006a48 <_vfiprintf_r+0x248>)
 8006862:	429d      	cmp	r5, r3
 8006864:	bf08      	it	eq
 8006866:	68f5      	ldreq	r5, [r6, #12]
 8006868:	e7da      	b.n	8006820 <_vfiprintf_r+0x20>
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	0598      	lsls	r0, r3, #22
 800686e:	d4ed      	bmi.n	800684c <_vfiprintf_r+0x4c>
 8006870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006872:	f000 fd1a 	bl	80072aa <__retarget_lock_release_recursive>
 8006876:	e7e9      	b.n	800684c <_vfiprintf_r+0x4c>
 8006878:	2300      	movs	r3, #0
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	2320      	movs	r3, #32
 800687e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006882:	f8cd 800c 	str.w	r8, [sp, #12]
 8006886:	2330      	movs	r3, #48	; 0x30
 8006888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a4c <_vfiprintf_r+0x24c>
 800688c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006890:	f04f 0901 	mov.w	r9, #1
 8006894:	4623      	mov	r3, r4
 8006896:	469a      	mov	sl, r3
 8006898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800689c:	b10a      	cbz	r2, 80068a2 <_vfiprintf_r+0xa2>
 800689e:	2a25      	cmp	r2, #37	; 0x25
 80068a0:	d1f9      	bne.n	8006896 <_vfiprintf_r+0x96>
 80068a2:	ebba 0b04 	subs.w	fp, sl, r4
 80068a6:	d00b      	beq.n	80068c0 <_vfiprintf_r+0xc0>
 80068a8:	465b      	mov	r3, fp
 80068aa:	4622      	mov	r2, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ff93 	bl	80067da <__sfputs_r>
 80068b4:	3001      	adds	r0, #1
 80068b6:	f000 80aa 	beq.w	8006a0e <_vfiprintf_r+0x20e>
 80068ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068bc:	445a      	add	r2, fp
 80068be:	9209      	str	r2, [sp, #36]	; 0x24
 80068c0:	f89a 3000 	ldrb.w	r3, [sl]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80a2 	beq.w	8006a0e <_vfiprintf_r+0x20e>
 80068ca:	2300      	movs	r3, #0
 80068cc:	f04f 32ff 	mov.w	r2, #4294967295
 80068d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d4:	f10a 0a01 	add.w	sl, sl, #1
 80068d8:	9304      	str	r3, [sp, #16]
 80068da:	9307      	str	r3, [sp, #28]
 80068dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068e0:	931a      	str	r3, [sp, #104]	; 0x68
 80068e2:	4654      	mov	r4, sl
 80068e4:	2205      	movs	r2, #5
 80068e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ea:	4858      	ldr	r0, [pc, #352]	; (8006a4c <_vfiprintf_r+0x24c>)
 80068ec:	f7f9 fc78 	bl	80001e0 <memchr>
 80068f0:	9a04      	ldr	r2, [sp, #16]
 80068f2:	b9d8      	cbnz	r0, 800692c <_vfiprintf_r+0x12c>
 80068f4:	06d1      	lsls	r1, r2, #27
 80068f6:	bf44      	itt	mi
 80068f8:	2320      	movmi	r3, #32
 80068fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fe:	0713      	lsls	r3, r2, #28
 8006900:	bf44      	itt	mi
 8006902:	232b      	movmi	r3, #43	; 0x2b
 8006904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006908:	f89a 3000 	ldrb.w	r3, [sl]
 800690c:	2b2a      	cmp	r3, #42	; 0x2a
 800690e:	d015      	beq.n	800693c <_vfiprintf_r+0x13c>
 8006910:	9a07      	ldr	r2, [sp, #28]
 8006912:	4654      	mov	r4, sl
 8006914:	2000      	movs	r0, #0
 8006916:	f04f 0c0a 	mov.w	ip, #10
 800691a:	4621      	mov	r1, r4
 800691c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006920:	3b30      	subs	r3, #48	; 0x30
 8006922:	2b09      	cmp	r3, #9
 8006924:	d94e      	bls.n	80069c4 <_vfiprintf_r+0x1c4>
 8006926:	b1b0      	cbz	r0, 8006956 <_vfiprintf_r+0x156>
 8006928:	9207      	str	r2, [sp, #28]
 800692a:	e014      	b.n	8006956 <_vfiprintf_r+0x156>
 800692c:	eba0 0308 	sub.w	r3, r0, r8
 8006930:	fa09 f303 	lsl.w	r3, r9, r3
 8006934:	4313      	orrs	r3, r2
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	46a2      	mov	sl, r4
 800693a:	e7d2      	b.n	80068e2 <_vfiprintf_r+0xe2>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	1d19      	adds	r1, r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	9103      	str	r1, [sp, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfbb      	ittet	lt
 8006948:	425b      	neglt	r3, r3
 800694a:	f042 0202 	orrlt.w	r2, r2, #2
 800694e:	9307      	strge	r3, [sp, #28]
 8006950:	9307      	strlt	r3, [sp, #28]
 8006952:	bfb8      	it	lt
 8006954:	9204      	strlt	r2, [sp, #16]
 8006956:	7823      	ldrb	r3, [r4, #0]
 8006958:	2b2e      	cmp	r3, #46	; 0x2e
 800695a:	d10c      	bne.n	8006976 <_vfiprintf_r+0x176>
 800695c:	7863      	ldrb	r3, [r4, #1]
 800695e:	2b2a      	cmp	r3, #42	; 0x2a
 8006960:	d135      	bne.n	80069ce <_vfiprintf_r+0x1ce>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	9203      	str	r2, [sp, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfb8      	it	lt
 800696e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006972:	3402      	adds	r4, #2
 8006974:	9305      	str	r3, [sp, #20]
 8006976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a5c <_vfiprintf_r+0x25c>
 800697a:	7821      	ldrb	r1, [r4, #0]
 800697c:	2203      	movs	r2, #3
 800697e:	4650      	mov	r0, sl
 8006980:	f7f9 fc2e 	bl	80001e0 <memchr>
 8006984:	b140      	cbz	r0, 8006998 <_vfiprintf_r+0x198>
 8006986:	2340      	movs	r3, #64	; 0x40
 8006988:	eba0 000a 	sub.w	r0, r0, sl
 800698c:	fa03 f000 	lsl.w	r0, r3, r0
 8006990:	9b04      	ldr	r3, [sp, #16]
 8006992:	4303      	orrs	r3, r0
 8006994:	3401      	adds	r4, #1
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699c:	482c      	ldr	r0, [pc, #176]	; (8006a50 <_vfiprintf_r+0x250>)
 800699e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069a2:	2206      	movs	r2, #6
 80069a4:	f7f9 fc1c 	bl	80001e0 <memchr>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d03f      	beq.n	8006a2c <_vfiprintf_r+0x22c>
 80069ac:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <_vfiprintf_r+0x254>)
 80069ae:	bb1b      	cbnz	r3, 80069f8 <_vfiprintf_r+0x1f8>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	3307      	adds	r3, #7
 80069b4:	f023 0307 	bic.w	r3, r3, #7
 80069b8:	3308      	adds	r3, #8
 80069ba:	9303      	str	r3, [sp, #12]
 80069bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069be:	443b      	add	r3, r7
 80069c0:	9309      	str	r3, [sp, #36]	; 0x24
 80069c2:	e767      	b.n	8006894 <_vfiprintf_r+0x94>
 80069c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069c8:	460c      	mov	r4, r1
 80069ca:	2001      	movs	r0, #1
 80069cc:	e7a5      	b.n	800691a <_vfiprintf_r+0x11a>
 80069ce:	2300      	movs	r3, #0
 80069d0:	3401      	adds	r4, #1
 80069d2:	9305      	str	r3, [sp, #20]
 80069d4:	4619      	mov	r1, r3
 80069d6:	f04f 0c0a 	mov.w	ip, #10
 80069da:	4620      	mov	r0, r4
 80069dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069e0:	3a30      	subs	r2, #48	; 0x30
 80069e2:	2a09      	cmp	r2, #9
 80069e4:	d903      	bls.n	80069ee <_vfiprintf_r+0x1ee>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0c5      	beq.n	8006976 <_vfiprintf_r+0x176>
 80069ea:	9105      	str	r1, [sp, #20]
 80069ec:	e7c3      	b.n	8006976 <_vfiprintf_r+0x176>
 80069ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f2:	4604      	mov	r4, r0
 80069f4:	2301      	movs	r3, #1
 80069f6:	e7f0      	b.n	80069da <_vfiprintf_r+0x1da>
 80069f8:	ab03      	add	r3, sp, #12
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	462a      	mov	r2, r5
 80069fe:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <_vfiprintf_r+0x258>)
 8006a00:	a904      	add	r1, sp, #16
 8006a02:	4630      	mov	r0, r6
 8006a04:	f3af 8000 	nop.w
 8006a08:	4607      	mov	r7, r0
 8006a0a:	1c78      	adds	r0, r7, #1
 8006a0c:	d1d6      	bne.n	80069bc <_vfiprintf_r+0x1bc>
 8006a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a10:	07d9      	lsls	r1, r3, #31
 8006a12:	d405      	bmi.n	8006a20 <_vfiprintf_r+0x220>
 8006a14:	89ab      	ldrh	r3, [r5, #12]
 8006a16:	059a      	lsls	r2, r3, #22
 8006a18:	d402      	bmi.n	8006a20 <_vfiprintf_r+0x220>
 8006a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1c:	f000 fc45 	bl	80072aa <__retarget_lock_release_recursive>
 8006a20:	89ab      	ldrh	r3, [r5, #12]
 8006a22:	065b      	lsls	r3, r3, #25
 8006a24:	f53f af12 	bmi.w	800684c <_vfiprintf_r+0x4c>
 8006a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a2a:	e711      	b.n	8006850 <_vfiprintf_r+0x50>
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <_vfiprintf_r+0x258>)
 8006a34:	a904      	add	r1, sp, #16
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 f880 	bl	8006b3c <_printf_i>
 8006a3c:	e7e4      	b.n	8006a08 <_vfiprintf_r+0x208>
 8006a3e:	bf00      	nop
 8006a40:	08007864 	.word	0x08007864
 8006a44:	08007884 	.word	0x08007884
 8006a48:	08007844 	.word	0x08007844
 8006a4c:	0800780e 	.word	0x0800780e
 8006a50:	08007818 	.word	0x08007818
 8006a54:	00000000 	.word	0x00000000
 8006a58:	080067db 	.word	0x080067db
 8006a5c:	08007814 	.word	0x08007814

08006a60 <_printf_common>:
 8006a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	4616      	mov	r6, r2
 8006a66:	4699      	mov	r9, r3
 8006a68:	688a      	ldr	r2, [r1, #8]
 8006a6a:	690b      	ldr	r3, [r1, #16]
 8006a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a70:	4293      	cmp	r3, r2
 8006a72:	bfb8      	it	lt
 8006a74:	4613      	movlt	r3, r2
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	b10a      	cbz	r2, 8006a86 <_printf_common+0x26>
 8006a82:	3301      	adds	r3, #1
 8006a84:	6033      	str	r3, [r6, #0]
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	0699      	lsls	r1, r3, #26
 8006a8a:	bf42      	ittt	mi
 8006a8c:	6833      	ldrmi	r3, [r6, #0]
 8006a8e:	3302      	addmi	r3, #2
 8006a90:	6033      	strmi	r3, [r6, #0]
 8006a92:	6825      	ldr	r5, [r4, #0]
 8006a94:	f015 0506 	ands.w	r5, r5, #6
 8006a98:	d106      	bne.n	8006aa8 <_printf_common+0x48>
 8006a9a:	f104 0a19 	add.w	sl, r4, #25
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	6832      	ldr	r2, [r6, #0]
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	dc26      	bgt.n	8006af6 <_printf_common+0x96>
 8006aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aac:	1e13      	subs	r3, r2, #0
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	bf18      	it	ne
 8006ab2:	2301      	movne	r3, #1
 8006ab4:	0692      	lsls	r2, r2, #26
 8006ab6:	d42b      	bmi.n	8006b10 <_printf_common+0xb0>
 8006ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006abc:	4649      	mov	r1, r9
 8006abe:	4638      	mov	r0, r7
 8006ac0:	47c0      	blx	r8
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d01e      	beq.n	8006b04 <_printf_common+0xa4>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	68e5      	ldr	r5, [r4, #12]
 8006aca:	6832      	ldr	r2, [r6, #0]
 8006acc:	f003 0306 	and.w	r3, r3, #6
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	bf08      	it	eq
 8006ad4:	1aad      	subeq	r5, r5, r2
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	6922      	ldr	r2, [r4, #16]
 8006ada:	bf0c      	ite	eq
 8006adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae0:	2500      	movne	r5, #0
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	bfc4      	itt	gt
 8006ae6:	1a9b      	subgt	r3, r3, r2
 8006ae8:	18ed      	addgt	r5, r5, r3
 8006aea:	2600      	movs	r6, #0
 8006aec:	341a      	adds	r4, #26
 8006aee:	42b5      	cmp	r5, r6
 8006af0:	d11a      	bne.n	8006b28 <_printf_common+0xc8>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e008      	b.n	8006b08 <_printf_common+0xa8>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4652      	mov	r2, sl
 8006afa:	4649      	mov	r1, r9
 8006afc:	4638      	mov	r0, r7
 8006afe:	47c0      	blx	r8
 8006b00:	3001      	adds	r0, #1
 8006b02:	d103      	bne.n	8006b0c <_printf_common+0xac>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	e7c6      	b.n	8006a9e <_printf_common+0x3e>
 8006b10:	18e1      	adds	r1, r4, r3
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	2030      	movs	r0, #48	; 0x30
 8006b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b1a:	4422      	add	r2, r4
 8006b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b24:	3302      	adds	r3, #2
 8006b26:	e7c7      	b.n	8006ab8 <_printf_common+0x58>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d0e6      	beq.n	8006b04 <_printf_common+0xa4>
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7d9      	b.n	8006aee <_printf_common+0x8e>
	...

08006b3c <_printf_i>:
 8006b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	7e0f      	ldrb	r7, [r1, #24]
 8006b42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b44:	2f78      	cmp	r7, #120	; 0x78
 8006b46:	4691      	mov	r9, r2
 8006b48:	4680      	mov	r8, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	469a      	mov	sl, r3
 8006b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b52:	d807      	bhi.n	8006b64 <_printf_i+0x28>
 8006b54:	2f62      	cmp	r7, #98	; 0x62
 8006b56:	d80a      	bhi.n	8006b6e <_printf_i+0x32>
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	f000 80d8 	beq.w	8006d0e <_printf_i+0x1d2>
 8006b5e:	2f58      	cmp	r7, #88	; 0x58
 8006b60:	f000 80a3 	beq.w	8006caa <_printf_i+0x16e>
 8006b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b6c:	e03a      	b.n	8006be4 <_printf_i+0xa8>
 8006b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b72:	2b15      	cmp	r3, #21
 8006b74:	d8f6      	bhi.n	8006b64 <_printf_i+0x28>
 8006b76:	a101      	add	r1, pc, #4	; (adr r1, 8006b7c <_printf_i+0x40>)
 8006b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b7c:	08006bd5 	.word	0x08006bd5
 8006b80:	08006be9 	.word	0x08006be9
 8006b84:	08006b65 	.word	0x08006b65
 8006b88:	08006b65 	.word	0x08006b65
 8006b8c:	08006b65 	.word	0x08006b65
 8006b90:	08006b65 	.word	0x08006b65
 8006b94:	08006be9 	.word	0x08006be9
 8006b98:	08006b65 	.word	0x08006b65
 8006b9c:	08006b65 	.word	0x08006b65
 8006ba0:	08006b65 	.word	0x08006b65
 8006ba4:	08006b65 	.word	0x08006b65
 8006ba8:	08006cf5 	.word	0x08006cf5
 8006bac:	08006c19 	.word	0x08006c19
 8006bb0:	08006cd7 	.word	0x08006cd7
 8006bb4:	08006b65 	.word	0x08006b65
 8006bb8:	08006b65 	.word	0x08006b65
 8006bbc:	08006d17 	.word	0x08006d17
 8006bc0:	08006b65 	.word	0x08006b65
 8006bc4:	08006c19 	.word	0x08006c19
 8006bc8:	08006b65 	.word	0x08006b65
 8006bcc:	08006b65 	.word	0x08006b65
 8006bd0:	08006cdf 	.word	0x08006cdf
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	1d1a      	adds	r2, r3, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	602a      	str	r2, [r5, #0]
 8006bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0a3      	b.n	8006d30 <_printf_i+0x1f4>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	6829      	ldr	r1, [r5, #0]
 8006bec:	0606      	lsls	r6, r0, #24
 8006bee:	f101 0304 	add.w	r3, r1, #4
 8006bf2:	d50a      	bpl.n	8006c0a <_printf_i+0xce>
 8006bf4:	680e      	ldr	r6, [r1, #0]
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	da03      	bge.n	8006c04 <_printf_i+0xc8>
 8006bfc:	232d      	movs	r3, #45	; 0x2d
 8006bfe:	4276      	negs	r6, r6
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	485e      	ldr	r0, [pc, #376]	; (8006d80 <_printf_i+0x244>)
 8006c06:	230a      	movs	r3, #10
 8006c08:	e019      	b.n	8006c3e <_printf_i+0x102>
 8006c0a:	680e      	ldr	r6, [r1, #0]
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c12:	bf18      	it	ne
 8006c14:	b236      	sxthne	r6, r6
 8006c16:	e7ef      	b.n	8006bf8 <_printf_i+0xbc>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	1d19      	adds	r1, r3, #4
 8006c1e:	6029      	str	r1, [r5, #0]
 8006c20:	0601      	lsls	r1, r0, #24
 8006c22:	d501      	bpl.n	8006c28 <_printf_i+0xec>
 8006c24:	681e      	ldr	r6, [r3, #0]
 8006c26:	e002      	b.n	8006c2e <_printf_i+0xf2>
 8006c28:	0646      	lsls	r6, r0, #25
 8006c2a:	d5fb      	bpl.n	8006c24 <_printf_i+0xe8>
 8006c2c:	881e      	ldrh	r6, [r3, #0]
 8006c2e:	4854      	ldr	r0, [pc, #336]	; (8006d80 <_printf_i+0x244>)
 8006c30:	2f6f      	cmp	r7, #111	; 0x6f
 8006c32:	bf0c      	ite	eq
 8006c34:	2308      	moveq	r3, #8
 8006c36:	230a      	movne	r3, #10
 8006c38:	2100      	movs	r1, #0
 8006c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c3e:	6865      	ldr	r5, [r4, #4]
 8006c40:	60a5      	str	r5, [r4, #8]
 8006c42:	2d00      	cmp	r5, #0
 8006c44:	bfa2      	ittt	ge
 8006c46:	6821      	ldrge	r1, [r4, #0]
 8006c48:	f021 0104 	bicge.w	r1, r1, #4
 8006c4c:	6021      	strge	r1, [r4, #0]
 8006c4e:	b90e      	cbnz	r6, 8006c54 <_printf_i+0x118>
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	d04d      	beq.n	8006cf0 <_printf_i+0x1b4>
 8006c54:	4615      	mov	r5, r2
 8006c56:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c5a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c5e:	5dc7      	ldrb	r7, [r0, r7]
 8006c60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c64:	4637      	mov	r7, r6
 8006c66:	42bb      	cmp	r3, r7
 8006c68:	460e      	mov	r6, r1
 8006c6a:	d9f4      	bls.n	8006c56 <_printf_i+0x11a>
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d10b      	bne.n	8006c88 <_printf_i+0x14c>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	07de      	lsls	r6, r3, #31
 8006c74:	d508      	bpl.n	8006c88 <_printf_i+0x14c>
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	6861      	ldr	r1, [r4, #4]
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	bfde      	ittt	le
 8006c7e:	2330      	movle	r3, #48	; 0x30
 8006c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c88:	1b52      	subs	r2, r2, r5
 8006c8a:	6122      	str	r2, [r4, #16]
 8006c8c:	f8cd a000 	str.w	sl, [sp]
 8006c90:	464b      	mov	r3, r9
 8006c92:	aa03      	add	r2, sp, #12
 8006c94:	4621      	mov	r1, r4
 8006c96:	4640      	mov	r0, r8
 8006c98:	f7ff fee2 	bl	8006a60 <_printf_common>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d14c      	bne.n	8006d3a <_printf_i+0x1fe>
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	b004      	add	sp, #16
 8006ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006caa:	4835      	ldr	r0, [pc, #212]	; (8006d80 <_printf_i+0x244>)
 8006cac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cb0:	6829      	ldr	r1, [r5, #0]
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cb8:	6029      	str	r1, [r5, #0]
 8006cba:	061d      	lsls	r5, r3, #24
 8006cbc:	d514      	bpl.n	8006ce8 <_printf_i+0x1ac>
 8006cbe:	07df      	lsls	r7, r3, #31
 8006cc0:	bf44      	itt	mi
 8006cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc6:	6023      	strmi	r3, [r4, #0]
 8006cc8:	b91e      	cbnz	r6, 8006cd2 <_printf_i+0x196>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	f023 0320 	bic.w	r3, r3, #32
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	2310      	movs	r3, #16
 8006cd4:	e7b0      	b.n	8006c38 <_printf_i+0xfc>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	f043 0320 	orr.w	r3, r3, #32
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	2378      	movs	r3, #120	; 0x78
 8006ce0:	4828      	ldr	r0, [pc, #160]	; (8006d84 <_printf_i+0x248>)
 8006ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ce6:	e7e3      	b.n	8006cb0 <_printf_i+0x174>
 8006ce8:	0659      	lsls	r1, r3, #25
 8006cea:	bf48      	it	mi
 8006cec:	b2b6      	uxthmi	r6, r6
 8006cee:	e7e6      	b.n	8006cbe <_printf_i+0x182>
 8006cf0:	4615      	mov	r5, r2
 8006cf2:	e7bb      	b.n	8006c6c <_printf_i+0x130>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	6826      	ldr	r6, [r4, #0]
 8006cf8:	6961      	ldr	r1, [r4, #20]
 8006cfa:	1d18      	adds	r0, r3, #4
 8006cfc:	6028      	str	r0, [r5, #0]
 8006cfe:	0635      	lsls	r5, r6, #24
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	d501      	bpl.n	8006d08 <_printf_i+0x1cc>
 8006d04:	6019      	str	r1, [r3, #0]
 8006d06:	e002      	b.n	8006d0e <_printf_i+0x1d2>
 8006d08:	0670      	lsls	r0, r6, #25
 8006d0a:	d5fb      	bpl.n	8006d04 <_printf_i+0x1c8>
 8006d0c:	8019      	strh	r1, [r3, #0]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	4615      	mov	r5, r2
 8006d14:	e7ba      	b.n	8006c8c <_printf_i+0x150>
 8006d16:	682b      	ldr	r3, [r5, #0]
 8006d18:	1d1a      	adds	r2, r3, #4
 8006d1a:	602a      	str	r2, [r5, #0]
 8006d1c:	681d      	ldr	r5, [r3, #0]
 8006d1e:	6862      	ldr	r2, [r4, #4]
 8006d20:	2100      	movs	r1, #0
 8006d22:	4628      	mov	r0, r5
 8006d24:	f7f9 fa5c 	bl	80001e0 <memchr>
 8006d28:	b108      	cbz	r0, 8006d2e <_printf_i+0x1f2>
 8006d2a:	1b40      	subs	r0, r0, r5
 8006d2c:	6060      	str	r0, [r4, #4]
 8006d2e:	6863      	ldr	r3, [r4, #4]
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	2300      	movs	r3, #0
 8006d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d38:	e7a8      	b.n	8006c8c <_printf_i+0x150>
 8006d3a:	6923      	ldr	r3, [r4, #16]
 8006d3c:	462a      	mov	r2, r5
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4640      	mov	r0, r8
 8006d42:	47d0      	blx	sl
 8006d44:	3001      	adds	r0, #1
 8006d46:	d0ab      	beq.n	8006ca0 <_printf_i+0x164>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	079b      	lsls	r3, r3, #30
 8006d4c:	d413      	bmi.n	8006d76 <_printf_i+0x23a>
 8006d4e:	68e0      	ldr	r0, [r4, #12]
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	4298      	cmp	r0, r3
 8006d54:	bfb8      	it	lt
 8006d56:	4618      	movlt	r0, r3
 8006d58:	e7a4      	b.n	8006ca4 <_printf_i+0x168>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4640      	mov	r0, r8
 8006d62:	47d0      	blx	sl
 8006d64:	3001      	adds	r0, #1
 8006d66:	d09b      	beq.n	8006ca0 <_printf_i+0x164>
 8006d68:	3501      	adds	r5, #1
 8006d6a:	68e3      	ldr	r3, [r4, #12]
 8006d6c:	9903      	ldr	r1, [sp, #12]
 8006d6e:	1a5b      	subs	r3, r3, r1
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dcf2      	bgt.n	8006d5a <_printf_i+0x21e>
 8006d74:	e7eb      	b.n	8006d4e <_printf_i+0x212>
 8006d76:	2500      	movs	r5, #0
 8006d78:	f104 0619 	add.w	r6, r4, #25
 8006d7c:	e7f5      	b.n	8006d6a <_printf_i+0x22e>
 8006d7e:	bf00      	nop
 8006d80:	0800781f 	.word	0x0800781f
 8006d84:	08007830 	.word	0x08007830

08006d88 <_sbrk_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d06      	ldr	r5, [pc, #24]	; (8006da4 <_sbrk_r+0x1c>)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4608      	mov	r0, r1
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	f7fa f8d8 	bl	8000f48 <_sbrk>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d102      	bne.n	8006da2 <_sbrk_r+0x1a>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	b103      	cbz	r3, 8006da2 <_sbrk_r+0x1a>
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	20012f00 	.word	0x20012f00

08006da8 <__swbuf_r>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	460e      	mov	r6, r1
 8006dac:	4614      	mov	r4, r2
 8006dae:	4605      	mov	r5, r0
 8006db0:	b118      	cbz	r0, 8006dba <__swbuf_r+0x12>
 8006db2:	6983      	ldr	r3, [r0, #24]
 8006db4:	b90b      	cbnz	r3, 8006dba <__swbuf_r+0x12>
 8006db6:	f000 f9d9 	bl	800716c <__sinit>
 8006dba:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <__swbuf_r+0x98>)
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	d12b      	bne.n	8006e18 <__swbuf_r+0x70>
 8006dc0:	686c      	ldr	r4, [r5, #4]
 8006dc2:	69a3      	ldr	r3, [r4, #24]
 8006dc4:	60a3      	str	r3, [r4, #8]
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	071a      	lsls	r2, r3, #28
 8006dca:	d52f      	bpl.n	8006e2c <__swbuf_r+0x84>
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	b36b      	cbz	r3, 8006e2c <__swbuf_r+0x84>
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	1ac0      	subs	r0, r0, r3
 8006dd6:	6963      	ldr	r3, [r4, #20]
 8006dd8:	b2f6      	uxtb	r6, r6
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	4637      	mov	r7, r6
 8006dde:	dc04      	bgt.n	8006dea <__swbuf_r+0x42>
 8006de0:	4621      	mov	r1, r4
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 f92e 	bl	8007044 <_fflush_r>
 8006de8:	bb30      	cbnz	r0, 8006e38 <__swbuf_r+0x90>
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	60a3      	str	r3, [r4, #8]
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	6022      	str	r2, [r4, #0]
 8006df6:	701e      	strb	r6, [r3, #0]
 8006df8:	6963      	ldr	r3, [r4, #20]
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	4283      	cmp	r3, r0
 8006dfe:	d004      	beq.n	8006e0a <__swbuf_r+0x62>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d506      	bpl.n	8006e14 <__swbuf_r+0x6c>
 8006e06:	2e0a      	cmp	r6, #10
 8006e08:	d104      	bne.n	8006e14 <__swbuf_r+0x6c>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 f919 	bl	8007044 <_fflush_r>
 8006e12:	b988      	cbnz	r0, 8006e38 <__swbuf_r+0x90>
 8006e14:	4638      	mov	r0, r7
 8006e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <__swbuf_r+0x9c>)
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	d101      	bne.n	8006e22 <__swbuf_r+0x7a>
 8006e1e:	68ac      	ldr	r4, [r5, #8]
 8006e20:	e7cf      	b.n	8006dc2 <__swbuf_r+0x1a>
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <__swbuf_r+0xa0>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	bf08      	it	eq
 8006e28:	68ec      	ldreq	r4, [r5, #12]
 8006e2a:	e7ca      	b.n	8006dc2 <__swbuf_r+0x1a>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 f80c 	bl	8006e4c <__swsetup_r>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d0cb      	beq.n	8006dd0 <__swbuf_r+0x28>
 8006e38:	f04f 37ff 	mov.w	r7, #4294967295
 8006e3c:	e7ea      	b.n	8006e14 <__swbuf_r+0x6c>
 8006e3e:	bf00      	nop
 8006e40:	08007864 	.word	0x08007864
 8006e44:	08007884 	.word	0x08007884
 8006e48:	08007844 	.word	0x08007844

08006e4c <__swsetup_r>:
 8006e4c:	4b32      	ldr	r3, [pc, #200]	; (8006f18 <__swsetup_r+0xcc>)
 8006e4e:	b570      	push	{r4, r5, r6, lr}
 8006e50:	681d      	ldr	r5, [r3, #0]
 8006e52:	4606      	mov	r6, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	b125      	cbz	r5, 8006e62 <__swsetup_r+0x16>
 8006e58:	69ab      	ldr	r3, [r5, #24]
 8006e5a:	b913      	cbnz	r3, 8006e62 <__swsetup_r+0x16>
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 f985 	bl	800716c <__sinit>
 8006e62:	4b2e      	ldr	r3, [pc, #184]	; (8006f1c <__swsetup_r+0xd0>)
 8006e64:	429c      	cmp	r4, r3
 8006e66:	d10f      	bne.n	8006e88 <__swsetup_r+0x3c>
 8006e68:	686c      	ldr	r4, [r5, #4]
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e70:	0719      	lsls	r1, r3, #28
 8006e72:	d42c      	bmi.n	8006ece <__swsetup_r+0x82>
 8006e74:	06dd      	lsls	r5, r3, #27
 8006e76:	d411      	bmi.n	8006e9c <__swsetup_r+0x50>
 8006e78:	2309      	movs	r3, #9
 8006e7a:	6033      	str	r3, [r6, #0]
 8006e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	e03e      	b.n	8006f06 <__swsetup_r+0xba>
 8006e88:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <__swsetup_r+0xd4>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d101      	bne.n	8006e92 <__swsetup_r+0x46>
 8006e8e:	68ac      	ldr	r4, [r5, #8]
 8006e90:	e7eb      	b.n	8006e6a <__swsetup_r+0x1e>
 8006e92:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <__swsetup_r+0xd8>)
 8006e94:	429c      	cmp	r4, r3
 8006e96:	bf08      	it	eq
 8006e98:	68ec      	ldreq	r4, [r5, #12]
 8006e9a:	e7e6      	b.n	8006e6a <__swsetup_r+0x1e>
 8006e9c:	0758      	lsls	r0, r3, #29
 8006e9e:	d512      	bpl.n	8006ec6 <__swsetup_r+0x7a>
 8006ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ea2:	b141      	cbz	r1, 8006eb6 <__swsetup_r+0x6a>
 8006ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	d002      	beq.n	8006eb2 <__swsetup_r+0x66>
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff fa41 	bl	8006334 <_free_r>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6063      	str	r3, [r4, #4]
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	f043 0308 	orr.w	r3, r3, #8
 8006ecc:	81a3      	strh	r3, [r4, #12]
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	b94b      	cbnz	r3, 8006ee6 <__swsetup_r+0x9a>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006edc:	d003      	beq.n	8006ee6 <__swsetup_r+0x9a>
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f000 fa09 	bl	80072f8 <__smakebuf_r>
 8006ee6:	89a0      	ldrh	r0, [r4, #12]
 8006ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eec:	f010 0301 	ands.w	r3, r0, #1
 8006ef0:	d00a      	beq.n	8006f08 <__swsetup_r+0xbc>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60a3      	str	r3, [r4, #8]
 8006ef6:	6963      	ldr	r3, [r4, #20]
 8006ef8:	425b      	negs	r3, r3
 8006efa:	61a3      	str	r3, [r4, #24]
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	b943      	cbnz	r3, 8006f12 <__swsetup_r+0xc6>
 8006f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f04:	d1ba      	bne.n	8006e7c <__swsetup_r+0x30>
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	0781      	lsls	r1, r0, #30
 8006f0a:	bf58      	it	pl
 8006f0c:	6963      	ldrpl	r3, [r4, #20]
 8006f0e:	60a3      	str	r3, [r4, #8]
 8006f10:	e7f4      	b.n	8006efc <__swsetup_r+0xb0>
 8006f12:	2000      	movs	r0, #0
 8006f14:	e7f7      	b.n	8006f06 <__swsetup_r+0xba>
 8006f16:	bf00      	nop
 8006f18:	20000028 	.word	0x20000028
 8006f1c:	08007864 	.word	0x08007864
 8006f20:	08007884 	.word	0x08007884
 8006f24:	08007844 	.word	0x08007844

08006f28 <abort>:
 8006f28:	b508      	push	{r3, lr}
 8006f2a:	2006      	movs	r0, #6
 8006f2c:	f000 faa2 	bl	8007474 <raise>
 8006f30:	2001      	movs	r0, #1
 8006f32:	f7f9 ff91 	bl	8000e58 <_exit>
	...

08006f38 <__sflush_r>:
 8006f38:	898a      	ldrh	r2, [r1, #12]
 8006f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	4605      	mov	r5, r0
 8006f40:	0710      	lsls	r0, r2, #28
 8006f42:	460c      	mov	r4, r1
 8006f44:	d458      	bmi.n	8006ff8 <__sflush_r+0xc0>
 8006f46:	684b      	ldr	r3, [r1, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dc05      	bgt.n	8006f58 <__sflush_r+0x20>
 8006f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dc02      	bgt.n	8006f58 <__sflush_r+0x20>
 8006f52:	2000      	movs	r0, #0
 8006f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	d0f9      	beq.n	8006f52 <__sflush_r+0x1a>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f64:	682f      	ldr	r7, [r5, #0]
 8006f66:	602b      	str	r3, [r5, #0]
 8006f68:	d032      	beq.n	8006fd0 <__sflush_r+0x98>
 8006f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	075a      	lsls	r2, r3, #29
 8006f70:	d505      	bpl.n	8006f7e <__sflush_r+0x46>
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	1ac0      	subs	r0, r0, r3
 8006f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f78:	b10b      	cbz	r3, 8006f7e <__sflush_r+0x46>
 8006f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f7c:	1ac0      	subs	r0, r0, r3
 8006f7e:	2300      	movs	r3, #0
 8006f80:	4602      	mov	r2, r0
 8006f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f84:	6a21      	ldr	r1, [r4, #32]
 8006f86:	4628      	mov	r0, r5
 8006f88:	47b0      	blx	r6
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	d106      	bne.n	8006f9e <__sflush_r+0x66>
 8006f90:	6829      	ldr	r1, [r5, #0]
 8006f92:	291d      	cmp	r1, #29
 8006f94:	d82c      	bhi.n	8006ff0 <__sflush_r+0xb8>
 8006f96:	4a2a      	ldr	r2, [pc, #168]	; (8007040 <__sflush_r+0x108>)
 8006f98:	40ca      	lsrs	r2, r1
 8006f9a:	07d6      	lsls	r6, r2, #31
 8006f9c:	d528      	bpl.n	8006ff0 <__sflush_r+0xb8>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	6062      	str	r2, [r4, #4]
 8006fa2:	04d9      	lsls	r1, r3, #19
 8006fa4:	6922      	ldr	r2, [r4, #16]
 8006fa6:	6022      	str	r2, [r4, #0]
 8006fa8:	d504      	bpl.n	8006fb4 <__sflush_r+0x7c>
 8006faa:	1c42      	adds	r2, r0, #1
 8006fac:	d101      	bne.n	8006fb2 <__sflush_r+0x7a>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	b903      	cbnz	r3, 8006fb4 <__sflush_r+0x7c>
 8006fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8006fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fb6:	602f      	str	r7, [r5, #0]
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d0ca      	beq.n	8006f52 <__sflush_r+0x1a>
 8006fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	d002      	beq.n	8006fca <__sflush_r+0x92>
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f7ff f9b5 	bl	8006334 <_free_r>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8006fce:	e7c1      	b.n	8006f54 <__sflush_r+0x1c>
 8006fd0:	6a21      	ldr	r1, [r4, #32]
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b0      	blx	r6
 8006fd8:	1c41      	adds	r1, r0, #1
 8006fda:	d1c7      	bne.n	8006f6c <__sflush_r+0x34>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0c4      	beq.n	8006f6c <__sflush_r+0x34>
 8006fe2:	2b1d      	cmp	r3, #29
 8006fe4:	d001      	beq.n	8006fea <__sflush_r+0xb2>
 8006fe6:	2b16      	cmp	r3, #22
 8006fe8:	d101      	bne.n	8006fee <__sflush_r+0xb6>
 8006fea:	602f      	str	r7, [r5, #0]
 8006fec:	e7b1      	b.n	8006f52 <__sflush_r+0x1a>
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	e7ad      	b.n	8006f54 <__sflush_r+0x1c>
 8006ff8:	690f      	ldr	r7, [r1, #16]
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	d0a9      	beq.n	8006f52 <__sflush_r+0x1a>
 8006ffe:	0793      	lsls	r3, r2, #30
 8007000:	680e      	ldr	r6, [r1, #0]
 8007002:	bf08      	it	eq
 8007004:	694b      	ldreq	r3, [r1, #20]
 8007006:	600f      	str	r7, [r1, #0]
 8007008:	bf18      	it	ne
 800700a:	2300      	movne	r3, #0
 800700c:	eba6 0807 	sub.w	r8, r6, r7
 8007010:	608b      	str	r3, [r1, #8]
 8007012:	f1b8 0f00 	cmp.w	r8, #0
 8007016:	dd9c      	ble.n	8006f52 <__sflush_r+0x1a>
 8007018:	6a21      	ldr	r1, [r4, #32]
 800701a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800701c:	4643      	mov	r3, r8
 800701e:	463a      	mov	r2, r7
 8007020:	4628      	mov	r0, r5
 8007022:	47b0      	blx	r6
 8007024:	2800      	cmp	r0, #0
 8007026:	dc06      	bgt.n	8007036 <__sflush_r+0xfe>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	e78e      	b.n	8006f54 <__sflush_r+0x1c>
 8007036:	4407      	add	r7, r0
 8007038:	eba8 0800 	sub.w	r8, r8, r0
 800703c:	e7e9      	b.n	8007012 <__sflush_r+0xda>
 800703e:	bf00      	nop
 8007040:	20400001 	.word	0x20400001

08007044 <_fflush_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	690b      	ldr	r3, [r1, #16]
 8007048:	4605      	mov	r5, r0
 800704a:	460c      	mov	r4, r1
 800704c:	b913      	cbnz	r3, 8007054 <_fflush_r+0x10>
 800704e:	2500      	movs	r5, #0
 8007050:	4628      	mov	r0, r5
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	b118      	cbz	r0, 800705e <_fflush_r+0x1a>
 8007056:	6983      	ldr	r3, [r0, #24]
 8007058:	b90b      	cbnz	r3, 800705e <_fflush_r+0x1a>
 800705a:	f000 f887 	bl	800716c <__sinit>
 800705e:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <_fflush_r+0x6c>)
 8007060:	429c      	cmp	r4, r3
 8007062:	d11b      	bne.n	800709c <_fflush_r+0x58>
 8007064:	686c      	ldr	r4, [r5, #4]
 8007066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ef      	beq.n	800704e <_fflush_r+0xa>
 800706e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007070:	07d0      	lsls	r0, r2, #31
 8007072:	d404      	bmi.n	800707e <_fflush_r+0x3a>
 8007074:	0599      	lsls	r1, r3, #22
 8007076:	d402      	bmi.n	800707e <_fflush_r+0x3a>
 8007078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800707a:	f000 f915 	bl	80072a8 <__retarget_lock_acquire_recursive>
 800707e:	4628      	mov	r0, r5
 8007080:	4621      	mov	r1, r4
 8007082:	f7ff ff59 	bl	8006f38 <__sflush_r>
 8007086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007088:	07da      	lsls	r2, r3, #31
 800708a:	4605      	mov	r5, r0
 800708c:	d4e0      	bmi.n	8007050 <_fflush_r+0xc>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	059b      	lsls	r3, r3, #22
 8007092:	d4dd      	bmi.n	8007050 <_fflush_r+0xc>
 8007094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007096:	f000 f908 	bl	80072aa <__retarget_lock_release_recursive>
 800709a:	e7d9      	b.n	8007050 <_fflush_r+0xc>
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <_fflush_r+0x70>)
 800709e:	429c      	cmp	r4, r3
 80070a0:	d101      	bne.n	80070a6 <_fflush_r+0x62>
 80070a2:	68ac      	ldr	r4, [r5, #8]
 80070a4:	e7df      	b.n	8007066 <_fflush_r+0x22>
 80070a6:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <_fflush_r+0x74>)
 80070a8:	429c      	cmp	r4, r3
 80070aa:	bf08      	it	eq
 80070ac:	68ec      	ldreq	r4, [r5, #12]
 80070ae:	e7da      	b.n	8007066 <_fflush_r+0x22>
 80070b0:	08007864 	.word	0x08007864
 80070b4:	08007884 	.word	0x08007884
 80070b8:	08007844 	.word	0x08007844

080070bc <std>:
 80070bc:	2300      	movs	r3, #0
 80070be:	b510      	push	{r4, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	e9c0 3300 	strd	r3, r3, [r0]
 80070c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070ca:	6083      	str	r3, [r0, #8]
 80070cc:	8181      	strh	r1, [r0, #12]
 80070ce:	6643      	str	r3, [r0, #100]	; 0x64
 80070d0:	81c2      	strh	r2, [r0, #14]
 80070d2:	6183      	str	r3, [r0, #24]
 80070d4:	4619      	mov	r1, r3
 80070d6:	2208      	movs	r2, #8
 80070d8:	305c      	adds	r0, #92	; 0x5c
 80070da:	f7ff f88d 	bl	80061f8 <memset>
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <std+0x38>)
 80070e0:	6263      	str	r3, [r4, #36]	; 0x24
 80070e2:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <std+0x3c>)
 80070e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <std+0x40>)
 80070e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <std+0x44>)
 80070ec:	6224      	str	r4, [r4, #32]
 80070ee:	6323      	str	r3, [r4, #48]	; 0x30
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	bf00      	nop
 80070f4:	080074ad 	.word	0x080074ad
 80070f8:	080074cf 	.word	0x080074cf
 80070fc:	08007507 	.word	0x08007507
 8007100:	0800752b 	.word	0x0800752b

08007104 <_cleanup_r>:
 8007104:	4901      	ldr	r1, [pc, #4]	; (800710c <_cleanup_r+0x8>)
 8007106:	f000 b8af 	b.w	8007268 <_fwalk_reent>
 800710a:	bf00      	nop
 800710c:	08007045 	.word	0x08007045

08007110 <__sfmoreglue>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	2268      	movs	r2, #104	; 0x68
 8007114:	1e4d      	subs	r5, r1, #1
 8007116:	4355      	muls	r5, r2
 8007118:	460e      	mov	r6, r1
 800711a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800711e:	f7ff f975 	bl	800640c <_malloc_r>
 8007122:	4604      	mov	r4, r0
 8007124:	b140      	cbz	r0, 8007138 <__sfmoreglue+0x28>
 8007126:	2100      	movs	r1, #0
 8007128:	e9c0 1600 	strd	r1, r6, [r0]
 800712c:	300c      	adds	r0, #12
 800712e:	60a0      	str	r0, [r4, #8]
 8007130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007134:	f7ff f860 	bl	80061f8 <memset>
 8007138:	4620      	mov	r0, r4
 800713a:	bd70      	pop	{r4, r5, r6, pc}

0800713c <__sfp_lock_acquire>:
 800713c:	4801      	ldr	r0, [pc, #4]	; (8007144 <__sfp_lock_acquire+0x8>)
 800713e:	f000 b8b3 	b.w	80072a8 <__retarget_lock_acquire_recursive>
 8007142:	bf00      	nop
 8007144:	20012efd 	.word	0x20012efd

08007148 <__sfp_lock_release>:
 8007148:	4801      	ldr	r0, [pc, #4]	; (8007150 <__sfp_lock_release+0x8>)
 800714a:	f000 b8ae 	b.w	80072aa <__retarget_lock_release_recursive>
 800714e:	bf00      	nop
 8007150:	20012efd 	.word	0x20012efd

08007154 <__sinit_lock_acquire>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__sinit_lock_acquire+0x8>)
 8007156:	f000 b8a7 	b.w	80072a8 <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	20012efe 	.word	0x20012efe

08007160 <__sinit_lock_release>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__sinit_lock_release+0x8>)
 8007162:	f000 b8a2 	b.w	80072aa <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	20012efe 	.word	0x20012efe

0800716c <__sinit>:
 800716c:	b510      	push	{r4, lr}
 800716e:	4604      	mov	r4, r0
 8007170:	f7ff fff0 	bl	8007154 <__sinit_lock_acquire>
 8007174:	69a3      	ldr	r3, [r4, #24]
 8007176:	b11b      	cbz	r3, 8007180 <__sinit+0x14>
 8007178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800717c:	f7ff bff0 	b.w	8007160 <__sinit_lock_release>
 8007180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007184:	6523      	str	r3, [r4, #80]	; 0x50
 8007186:	4b13      	ldr	r3, [pc, #76]	; (80071d4 <__sinit+0x68>)
 8007188:	4a13      	ldr	r2, [pc, #76]	; (80071d8 <__sinit+0x6c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	62a2      	str	r2, [r4, #40]	; 0x28
 800718e:	42a3      	cmp	r3, r4
 8007190:	bf04      	itt	eq
 8007192:	2301      	moveq	r3, #1
 8007194:	61a3      	streq	r3, [r4, #24]
 8007196:	4620      	mov	r0, r4
 8007198:	f000 f820 	bl	80071dc <__sfp>
 800719c:	6060      	str	r0, [r4, #4]
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 f81c 	bl	80071dc <__sfp>
 80071a4:	60a0      	str	r0, [r4, #8]
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 f818 	bl	80071dc <__sfp>
 80071ac:	2200      	movs	r2, #0
 80071ae:	60e0      	str	r0, [r4, #12]
 80071b0:	2104      	movs	r1, #4
 80071b2:	6860      	ldr	r0, [r4, #4]
 80071b4:	f7ff ff82 	bl	80070bc <std>
 80071b8:	68a0      	ldr	r0, [r4, #8]
 80071ba:	2201      	movs	r2, #1
 80071bc:	2109      	movs	r1, #9
 80071be:	f7ff ff7d 	bl	80070bc <std>
 80071c2:	68e0      	ldr	r0, [r4, #12]
 80071c4:	2202      	movs	r2, #2
 80071c6:	2112      	movs	r1, #18
 80071c8:	f7ff ff78 	bl	80070bc <std>
 80071cc:	2301      	movs	r3, #1
 80071ce:	61a3      	str	r3, [r4, #24]
 80071d0:	e7d2      	b.n	8007178 <__sinit+0xc>
 80071d2:	bf00      	nop
 80071d4:	0800775c 	.word	0x0800775c
 80071d8:	08007105 	.word	0x08007105

080071dc <__sfp>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	4607      	mov	r7, r0
 80071e0:	f7ff ffac 	bl	800713c <__sfp_lock_acquire>
 80071e4:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <__sfp+0x84>)
 80071e6:	681e      	ldr	r6, [r3, #0]
 80071e8:	69b3      	ldr	r3, [r6, #24]
 80071ea:	b913      	cbnz	r3, 80071f2 <__sfp+0x16>
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff ffbd 	bl	800716c <__sinit>
 80071f2:	3648      	adds	r6, #72	; 0x48
 80071f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	d503      	bpl.n	8007204 <__sfp+0x28>
 80071fc:	6833      	ldr	r3, [r6, #0]
 80071fe:	b30b      	cbz	r3, 8007244 <__sfp+0x68>
 8007200:	6836      	ldr	r6, [r6, #0]
 8007202:	e7f7      	b.n	80071f4 <__sfp+0x18>
 8007204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007208:	b9d5      	cbnz	r5, 8007240 <__sfp+0x64>
 800720a:	4b16      	ldr	r3, [pc, #88]	; (8007264 <__sfp+0x88>)
 800720c:	60e3      	str	r3, [r4, #12]
 800720e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007212:	6665      	str	r5, [r4, #100]	; 0x64
 8007214:	f000 f847 	bl	80072a6 <__retarget_lock_init_recursive>
 8007218:	f7ff ff96 	bl	8007148 <__sfp_lock_release>
 800721c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007224:	6025      	str	r5, [r4, #0]
 8007226:	61a5      	str	r5, [r4, #24]
 8007228:	2208      	movs	r2, #8
 800722a:	4629      	mov	r1, r5
 800722c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007230:	f7fe ffe2 	bl	80061f8 <memset>
 8007234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800723c:	4620      	mov	r0, r4
 800723e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007240:	3468      	adds	r4, #104	; 0x68
 8007242:	e7d9      	b.n	80071f8 <__sfp+0x1c>
 8007244:	2104      	movs	r1, #4
 8007246:	4638      	mov	r0, r7
 8007248:	f7ff ff62 	bl	8007110 <__sfmoreglue>
 800724c:	4604      	mov	r4, r0
 800724e:	6030      	str	r0, [r6, #0]
 8007250:	2800      	cmp	r0, #0
 8007252:	d1d5      	bne.n	8007200 <__sfp+0x24>
 8007254:	f7ff ff78 	bl	8007148 <__sfp_lock_release>
 8007258:	230c      	movs	r3, #12
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	e7ee      	b.n	800723c <__sfp+0x60>
 800725e:	bf00      	nop
 8007260:	0800775c 	.word	0x0800775c
 8007264:	ffff0001 	.word	0xffff0001

08007268 <_fwalk_reent>:
 8007268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800726c:	4606      	mov	r6, r0
 800726e:	4688      	mov	r8, r1
 8007270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007274:	2700      	movs	r7, #0
 8007276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800727a:	f1b9 0901 	subs.w	r9, r9, #1
 800727e:	d505      	bpl.n	800728c <_fwalk_reent+0x24>
 8007280:	6824      	ldr	r4, [r4, #0]
 8007282:	2c00      	cmp	r4, #0
 8007284:	d1f7      	bne.n	8007276 <_fwalk_reent+0xe>
 8007286:	4638      	mov	r0, r7
 8007288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800728c:	89ab      	ldrh	r3, [r5, #12]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d907      	bls.n	80072a2 <_fwalk_reent+0x3a>
 8007292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007296:	3301      	adds	r3, #1
 8007298:	d003      	beq.n	80072a2 <_fwalk_reent+0x3a>
 800729a:	4629      	mov	r1, r5
 800729c:	4630      	mov	r0, r6
 800729e:	47c0      	blx	r8
 80072a0:	4307      	orrs	r7, r0
 80072a2:	3568      	adds	r5, #104	; 0x68
 80072a4:	e7e9      	b.n	800727a <_fwalk_reent+0x12>

080072a6 <__retarget_lock_init_recursive>:
 80072a6:	4770      	bx	lr

080072a8 <__retarget_lock_acquire_recursive>:
 80072a8:	4770      	bx	lr

080072aa <__retarget_lock_release_recursive>:
 80072aa:	4770      	bx	lr

080072ac <__swhatbuf_r>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	460e      	mov	r6, r1
 80072b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b4:	2900      	cmp	r1, #0
 80072b6:	b096      	sub	sp, #88	; 0x58
 80072b8:	4614      	mov	r4, r2
 80072ba:	461d      	mov	r5, r3
 80072bc:	da08      	bge.n	80072d0 <__swhatbuf_r+0x24>
 80072be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	602a      	str	r2, [r5, #0]
 80072c6:	061a      	lsls	r2, r3, #24
 80072c8:	d410      	bmi.n	80072ec <__swhatbuf_r+0x40>
 80072ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ce:	e00e      	b.n	80072ee <__swhatbuf_r+0x42>
 80072d0:	466a      	mov	r2, sp
 80072d2:	f000 f951 	bl	8007578 <_fstat_r>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	dbf1      	blt.n	80072be <__swhatbuf_r+0x12>
 80072da:	9a01      	ldr	r2, [sp, #4]
 80072dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072e4:	425a      	negs	r2, r3
 80072e6:	415a      	adcs	r2, r3
 80072e8:	602a      	str	r2, [r5, #0]
 80072ea:	e7ee      	b.n	80072ca <__swhatbuf_r+0x1e>
 80072ec:	2340      	movs	r3, #64	; 0x40
 80072ee:	2000      	movs	r0, #0
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	b016      	add	sp, #88	; 0x58
 80072f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080072f8 <__smakebuf_r>:
 80072f8:	898b      	ldrh	r3, [r1, #12]
 80072fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072fc:	079d      	lsls	r5, r3, #30
 80072fe:	4606      	mov	r6, r0
 8007300:	460c      	mov	r4, r1
 8007302:	d507      	bpl.n	8007314 <__smakebuf_r+0x1c>
 8007304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	2301      	movs	r3, #1
 800730e:	6163      	str	r3, [r4, #20]
 8007310:	b002      	add	sp, #8
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	ab01      	add	r3, sp, #4
 8007316:	466a      	mov	r2, sp
 8007318:	f7ff ffc8 	bl	80072ac <__swhatbuf_r>
 800731c:	9900      	ldr	r1, [sp, #0]
 800731e:	4605      	mov	r5, r0
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff f873 	bl	800640c <_malloc_r>
 8007326:	b948      	cbnz	r0, 800733c <__smakebuf_r+0x44>
 8007328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732c:	059a      	lsls	r2, r3, #22
 800732e:	d4ef      	bmi.n	8007310 <__smakebuf_r+0x18>
 8007330:	f023 0303 	bic.w	r3, r3, #3
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	e7e3      	b.n	8007304 <__smakebuf_r+0xc>
 800733c:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <__smakebuf_r+0x7c>)
 800733e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	6163      	str	r3, [r4, #20]
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	6120      	str	r0, [r4, #16]
 8007352:	b15b      	cbz	r3, 800736c <__smakebuf_r+0x74>
 8007354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007358:	4630      	mov	r0, r6
 800735a:	f000 f91f 	bl	800759c <_isatty_r>
 800735e:	b128      	cbz	r0, 800736c <__smakebuf_r+0x74>
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	89a0      	ldrh	r0, [r4, #12]
 800736e:	4305      	orrs	r5, r0
 8007370:	81a5      	strh	r5, [r4, #12]
 8007372:	e7cd      	b.n	8007310 <__smakebuf_r+0x18>
 8007374:	08007105 	.word	0x08007105

08007378 <memmove>:
 8007378:	4288      	cmp	r0, r1
 800737a:	b510      	push	{r4, lr}
 800737c:	eb01 0402 	add.w	r4, r1, r2
 8007380:	d902      	bls.n	8007388 <memmove+0x10>
 8007382:	4284      	cmp	r4, r0
 8007384:	4623      	mov	r3, r4
 8007386:	d807      	bhi.n	8007398 <memmove+0x20>
 8007388:	1e43      	subs	r3, r0, #1
 800738a:	42a1      	cmp	r1, r4
 800738c:	d008      	beq.n	80073a0 <memmove+0x28>
 800738e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007396:	e7f8      	b.n	800738a <memmove+0x12>
 8007398:	4402      	add	r2, r0
 800739a:	4601      	mov	r1, r0
 800739c:	428a      	cmp	r2, r1
 800739e:	d100      	bne.n	80073a2 <memmove+0x2a>
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073aa:	e7f7      	b.n	800739c <memmove+0x24>

080073ac <__malloc_lock>:
 80073ac:	4801      	ldr	r0, [pc, #4]	; (80073b4 <__malloc_lock+0x8>)
 80073ae:	f7ff bf7b 	b.w	80072a8 <__retarget_lock_acquire_recursive>
 80073b2:	bf00      	nop
 80073b4:	20012efc 	.word	0x20012efc

080073b8 <__malloc_unlock>:
 80073b8:	4801      	ldr	r0, [pc, #4]	; (80073c0 <__malloc_unlock+0x8>)
 80073ba:	f7ff bf76 	b.w	80072aa <__retarget_lock_release_recursive>
 80073be:	bf00      	nop
 80073c0:	20012efc 	.word	0x20012efc

080073c4 <_realloc_r>:
 80073c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c8:	4680      	mov	r8, r0
 80073ca:	4614      	mov	r4, r2
 80073cc:	460e      	mov	r6, r1
 80073ce:	b921      	cbnz	r1, 80073da <_realloc_r+0x16>
 80073d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d4:	4611      	mov	r1, r2
 80073d6:	f7ff b819 	b.w	800640c <_malloc_r>
 80073da:	b92a      	cbnz	r2, 80073e8 <_realloc_r+0x24>
 80073dc:	f7fe ffaa 	bl	8006334 <_free_r>
 80073e0:	4625      	mov	r5, r4
 80073e2:	4628      	mov	r0, r5
 80073e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e8:	f000 f8fa 	bl	80075e0 <_malloc_usable_size_r>
 80073ec:	4284      	cmp	r4, r0
 80073ee:	4607      	mov	r7, r0
 80073f0:	d802      	bhi.n	80073f8 <_realloc_r+0x34>
 80073f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073f6:	d812      	bhi.n	800741e <_realloc_r+0x5a>
 80073f8:	4621      	mov	r1, r4
 80073fa:	4640      	mov	r0, r8
 80073fc:	f7ff f806 	bl	800640c <_malloc_r>
 8007400:	4605      	mov	r5, r0
 8007402:	2800      	cmp	r0, #0
 8007404:	d0ed      	beq.n	80073e2 <_realloc_r+0x1e>
 8007406:	42bc      	cmp	r4, r7
 8007408:	4622      	mov	r2, r4
 800740a:	4631      	mov	r1, r6
 800740c:	bf28      	it	cs
 800740e:	463a      	movcs	r2, r7
 8007410:	f7fe fee4 	bl	80061dc <memcpy>
 8007414:	4631      	mov	r1, r6
 8007416:	4640      	mov	r0, r8
 8007418:	f7fe ff8c 	bl	8006334 <_free_r>
 800741c:	e7e1      	b.n	80073e2 <_realloc_r+0x1e>
 800741e:	4635      	mov	r5, r6
 8007420:	e7df      	b.n	80073e2 <_realloc_r+0x1e>

08007422 <_raise_r>:
 8007422:	291f      	cmp	r1, #31
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4604      	mov	r4, r0
 8007428:	460d      	mov	r5, r1
 800742a:	d904      	bls.n	8007436 <_raise_r+0x14>
 800742c:	2316      	movs	r3, #22
 800742e:	6003      	str	r3, [r0, #0]
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	bd38      	pop	{r3, r4, r5, pc}
 8007436:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007438:	b112      	cbz	r2, 8007440 <_raise_r+0x1e>
 800743a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800743e:	b94b      	cbnz	r3, 8007454 <_raise_r+0x32>
 8007440:	4620      	mov	r0, r4
 8007442:	f000 f831 	bl	80074a8 <_getpid_r>
 8007446:	462a      	mov	r2, r5
 8007448:	4601      	mov	r1, r0
 800744a:	4620      	mov	r0, r4
 800744c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007450:	f000 b818 	b.w	8007484 <_kill_r>
 8007454:	2b01      	cmp	r3, #1
 8007456:	d00a      	beq.n	800746e <_raise_r+0x4c>
 8007458:	1c59      	adds	r1, r3, #1
 800745a:	d103      	bne.n	8007464 <_raise_r+0x42>
 800745c:	2316      	movs	r3, #22
 800745e:	6003      	str	r3, [r0, #0]
 8007460:	2001      	movs	r0, #1
 8007462:	e7e7      	b.n	8007434 <_raise_r+0x12>
 8007464:	2400      	movs	r4, #0
 8007466:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800746a:	4628      	mov	r0, r5
 800746c:	4798      	blx	r3
 800746e:	2000      	movs	r0, #0
 8007470:	e7e0      	b.n	8007434 <_raise_r+0x12>
	...

08007474 <raise>:
 8007474:	4b02      	ldr	r3, [pc, #8]	; (8007480 <raise+0xc>)
 8007476:	4601      	mov	r1, r0
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	f7ff bfd2 	b.w	8007422 <_raise_r>
 800747e:	bf00      	nop
 8007480:	20000028 	.word	0x20000028

08007484 <_kill_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d07      	ldr	r5, [pc, #28]	; (80074a4 <_kill_r+0x20>)
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	f7f9 fcd1 	bl	8000e38 <_kill>
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	d102      	bne.n	80074a0 <_kill_r+0x1c>
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	b103      	cbz	r3, 80074a0 <_kill_r+0x1c>
 800749e:	6023      	str	r3, [r4, #0]
 80074a0:	bd38      	pop	{r3, r4, r5, pc}
 80074a2:	bf00      	nop
 80074a4:	20012f00 	.word	0x20012f00

080074a8 <_getpid_r>:
 80074a8:	f7f9 bcbe 	b.w	8000e28 <_getpid>

080074ac <__sread>:
 80074ac:	b510      	push	{r4, lr}
 80074ae:	460c      	mov	r4, r1
 80074b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b4:	f000 f89c 	bl	80075f0 <_read_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	bfab      	itete	ge
 80074bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074be:	89a3      	ldrhlt	r3, [r4, #12]
 80074c0:	181b      	addge	r3, r3, r0
 80074c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074c6:	bfac      	ite	ge
 80074c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074ca:	81a3      	strhlt	r3, [r4, #12]
 80074cc:	bd10      	pop	{r4, pc}

080074ce <__swrite>:
 80074ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d2:	461f      	mov	r7, r3
 80074d4:	898b      	ldrh	r3, [r1, #12]
 80074d6:	05db      	lsls	r3, r3, #23
 80074d8:	4605      	mov	r5, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	4616      	mov	r6, r2
 80074de:	d505      	bpl.n	80074ec <__swrite+0x1e>
 80074e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e4:	2302      	movs	r3, #2
 80074e6:	2200      	movs	r2, #0
 80074e8:	f000 f868 	bl	80075bc <_lseek_r>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	4632      	mov	r2, r6
 80074fa:	463b      	mov	r3, r7
 80074fc:	4628      	mov	r0, r5
 80074fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007502:	f000 b817 	b.w	8007534 <_write_r>

08007506 <__sseek>:
 8007506:	b510      	push	{r4, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 f855 	bl	80075bc <_lseek_r>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	bf15      	itete	ne
 8007518:	6560      	strne	r0, [r4, #84]	; 0x54
 800751a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800751e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007522:	81a3      	strheq	r3, [r4, #12]
 8007524:	bf18      	it	ne
 8007526:	81a3      	strhne	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__sclose>:
 800752a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752e:	f000 b813 	b.w	8007558 <_close_r>
	...

08007534 <_write_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	; (8007554 <_write_r+0x20>)
 8007538:	4604      	mov	r4, r0
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	2200      	movs	r2, #0
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7f9 fcaf 	bl	8000ea6 <_write>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_write_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_write_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20012f00 	.word	0x20012f00

08007558 <_close_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d06      	ldr	r5, [pc, #24]	; (8007574 <_close_r+0x1c>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	f7f9 fcbb 	bl	8000ede <_close>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_close_r+0x1a>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_close_r+0x1a>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	20012f00 	.word	0x20012f00

08007578 <_fstat_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d07      	ldr	r5, [pc, #28]	; (8007598 <_fstat_r+0x20>)
 800757c:	2300      	movs	r3, #0
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	602b      	str	r3, [r5, #0]
 8007586:	f7f9 fcb6 	bl	8000ef6 <_fstat>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d102      	bne.n	8007594 <_fstat_r+0x1c>
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	b103      	cbz	r3, 8007594 <_fstat_r+0x1c>
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	bd38      	pop	{r3, r4, r5, pc}
 8007596:	bf00      	nop
 8007598:	20012f00 	.word	0x20012f00

0800759c <_isatty_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d06      	ldr	r5, [pc, #24]	; (80075b8 <_isatty_r+0x1c>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	f7f9 fcb5 	bl	8000f16 <_isatty>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_isatty_r+0x1a>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_isatty_r+0x1a>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	20012f00 	.word	0x20012f00

080075bc <_lseek_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d07      	ldr	r5, [pc, #28]	; (80075dc <_lseek_r+0x20>)
 80075c0:	4604      	mov	r4, r0
 80075c2:	4608      	mov	r0, r1
 80075c4:	4611      	mov	r1, r2
 80075c6:	2200      	movs	r2, #0
 80075c8:	602a      	str	r2, [r5, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f7f9 fcae 	bl	8000f2c <_lseek>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_lseek_r+0x1e>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_lseek_r+0x1e>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	20012f00 	.word	0x20012f00

080075e0 <_malloc_usable_size_r>:
 80075e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e4:	1f18      	subs	r0, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bfbc      	itt	lt
 80075ea:	580b      	ldrlt	r3, [r1, r0]
 80075ec:	18c0      	addlt	r0, r0, r3
 80075ee:	4770      	bx	lr

080075f0 <_read_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	; (8007610 <_read_r+0x20>)
 80075f4:	4604      	mov	r4, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7f9 fc34 	bl	8000e6c <_read>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_read_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_read_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	20012f00 	.word	0x20012f00

08007614 <_init>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr

08007620 <_fini>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr
